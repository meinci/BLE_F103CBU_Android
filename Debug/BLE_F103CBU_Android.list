
BLE_F103CBU_Android.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005fc0  08005fc0  00015fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080061c0  080061c0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061c0  080061c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080061c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000010  080061d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  080061d8  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7e4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac6  00000000  00000000  0002a81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a44  00000000  00000000  0002daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2a3  00000000  00000000  000454e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008abac  00000000  00000000  00051787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  000dc384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fa4 	.word	0x08005fa4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005fa4 	.word	0x08005fa4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2uiz>:
 8000bb4:	004a      	lsls	r2, r1, #1
 8000bb6:	d211      	bcs.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d211      	bcs.n	8000be2 <__aeabi_d2uiz+0x2e>
 8000bbe:	d50d      	bpl.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d40e      	bmi.n	8000be8 <__aeabi_d2uiz+0x34>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d102      	bne.n	8000bee <__aeabi_d2uiz+0x3a>
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_d2f>:
 8000bf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bfc:	bf24      	itt	cs
 8000bfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_d2f+0x30>
 8000c08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c28:	d121      	bne.n	8000c6e <__aeabi_d2f+0x7a>
 8000c2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2e:	bfbc      	itt	lt
 8000c30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	4770      	bxlt	lr
 8000c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3e:	f1c2 0218 	rsb	r2, r2, #24
 8000c42:	f1c2 0c20 	rsb	ip, r2, #32
 8000c46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4e:	bf18      	it	ne
 8000c50:	f040 0001 	orrne.w	r0, r0, #1
 8000c54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c60:	ea40 000c 	orr.w	r0, r0, ip
 8000c64:	fa23 f302 	lsr.w	r3, r3, r2
 8000c68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c6c:	e7cc      	b.n	8000c08 <__aeabi_d2f+0x14>
 8000c6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c72:	d107      	bne.n	8000c84 <__aeabi_d2f+0x90>
 8000c74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c78:	bf1e      	ittt	ne
 8000c7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c82:	4770      	bxne	lr
 8000c84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_frsub>:
 8000c94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	e002      	b.n	8000ca0 <__addsf3>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fsub>:
 8000c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca0 <__addsf3>:
 8000ca0:	0042      	lsls	r2, r0, #1
 8000ca2:	bf1f      	itttt	ne
 8000ca4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca8:	ea92 0f03 	teqne	r2, r3
 8000cac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb4:	d06a      	beq.n	8000d8c <__addsf3+0xec>
 8000cb6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cbe:	bfc1      	itttt	gt
 8000cc0:	18d2      	addgt	r2, r2, r3
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	4048      	eorgt	r0, r1
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	bfb8      	it	lt
 8000cca:	425b      	neglt	r3, r3
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	bf88      	it	hi
 8000cd0:	4770      	bxhi	lr
 8000cd2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cde:	bf18      	it	ne
 8000ce0:	4240      	negne	r0, r0
 8000ce2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4249      	negne	r1, r1
 8000cf2:	ea92 0f03 	teq	r2, r3
 8000cf6:	d03f      	beq.n	8000d78 <__addsf3+0xd8>
 8000cf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cfc:	fa41 fc03 	asr.w	ip, r1, r3
 8000d00:	eb10 000c 	adds.w	r0, r0, ip
 8000d04:	f1c3 0320 	rsb	r3, r3, #32
 8000d08:	fa01 f103 	lsl.w	r1, r1, r3
 8000d0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__addsf3+0x78>
 8000d12:	4249      	negs	r1, r1
 8000d14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d1c:	d313      	bcc.n	8000d46 <__addsf3+0xa6>
 8000d1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d22:	d306      	bcc.n	8000d32 <__addsf3+0x92>
 8000d24:	0840      	lsrs	r0, r0, #1
 8000d26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2a:	f102 0201 	add.w	r2, r2, #1
 8000d2e:	2afe      	cmp	r2, #254	; 0xfe
 8000d30:	d251      	bcs.n	8000dd6 <__addsf3+0x136>
 8000d32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	ea40 0003 	orr.w	r0, r0, r3
 8000d44:	4770      	bx	lr
 8000d46:	0049      	lsls	r1, r1, #1
 8000d48:	eb40 0000 	adc.w	r0, r0, r0
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	bf28      	it	cs
 8000d50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d54:	d2ed      	bcs.n	8000d32 <__addsf3+0x92>
 8000d56:	fab0 fc80 	clz	ip, r0
 8000d5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d66:	bfaa      	itet	ge
 8000d68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d6c:	4252      	neglt	r2, r2
 8000d6e:	4318      	orrge	r0, r3
 8000d70:	bfbc      	itt	lt
 8000d72:	40d0      	lsrlt	r0, r2
 8000d74:	4318      	orrlt	r0, r3
 8000d76:	4770      	bx	lr
 8000d78:	f092 0f00 	teq	r2, #0
 8000d7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d80:	bf06      	itte	eq
 8000d82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d86:	3201      	addeq	r2, #1
 8000d88:	3b01      	subne	r3, #1
 8000d8a:	e7b5      	b.n	8000cf8 <__addsf3+0x58>
 8000d8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d94:	bf18      	it	ne
 8000d96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9a:	d021      	beq.n	8000de0 <__addsf3+0x140>
 8000d9c:	ea92 0f03 	teq	r2, r3
 8000da0:	d004      	beq.n	8000dac <__addsf3+0x10c>
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	bf08      	it	eq
 8000da8:	4608      	moveq	r0, r1
 8000daa:	4770      	bx	lr
 8000dac:	ea90 0f01 	teq	r0, r1
 8000db0:	bf1c      	itt	ne
 8000db2:	2000      	movne	r0, #0
 8000db4:	4770      	bxne	lr
 8000db6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dba:	d104      	bne.n	8000dc6 <__addsf3+0x126>
 8000dbc:	0040      	lsls	r0, r0, #1
 8000dbe:	bf28      	it	cs
 8000dc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dca:	bf3c      	itt	cc
 8000dcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd0:	4770      	bxcc	lr
 8000dd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de4:	bf16      	itet	ne
 8000de6:	4608      	movne	r0, r1
 8000de8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dec:	4601      	movne	r1, r0
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	bf06      	itte	eq
 8000df2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df6:	ea90 0f01 	teqeq	r0, r1
 8000dfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_ui2f>:
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e004      	b.n	8000e10 <__aeabi_i2f+0x8>
 8000e06:	bf00      	nop

08000e08 <__aeabi_i2f>:
 8000e08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e0c:	bf48      	it	mi
 8000e0e:	4240      	negmi	r0, r0
 8000e10:	ea5f 0c00 	movs.w	ip, r0
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	e01c      	b.n	8000e5e <__aeabi_l2f+0x2a>

08000e24 <__aeabi_ul2f>:
 8000e24:	ea50 0201 	orrs.w	r2, r0, r1
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e00a      	b.n	8000e48 <__aeabi_l2f+0x14>
 8000e32:	bf00      	nop

08000e34 <__aeabi_l2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__aeabi_l2f+0x14>
 8000e42:	4240      	negs	r0, r0
 8000e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e48:	ea5f 0c01 	movs.w	ip, r1
 8000e4c:	bf02      	ittt	eq
 8000e4e:	4684      	moveq	ip, r0
 8000e50:	4601      	moveq	r1, r0
 8000e52:	2000      	moveq	r0, #0
 8000e54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e58:	bf08      	it	eq
 8000e5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e62:	fabc f28c 	clz	r2, ip
 8000e66:	3a08      	subs	r2, #8
 8000e68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e6c:	db10      	blt.n	8000e90 <__aeabi_l2f+0x5c>
 8000e6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e72:	4463      	add	r3, ip
 8000e74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e78:	f1c2 0220 	rsb	r2, r2, #32
 8000e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e80:	fa20 f202 	lsr.w	r2, r0, r2
 8000e84:	eb43 0002 	adc.w	r0, r3, r2
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f102 0220 	add.w	r2, r2, #32
 8000e94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e98:	f1c2 0220 	rsb	r2, r2, #32
 8000e9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea4:	eb43 0002 	adc.w	r0, r3, r2
 8000ea8:	bf08      	it	eq
 8000eaa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_f2iz>:
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eb8:	d30f      	bcc.n	8000eda <__aeabi_f2iz+0x2a>
 8000eba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ebe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ec2:	d90d      	bls.n	8000ee0 <__aeabi_f2iz+0x30>
 8000ec4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ecc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ed0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed4:	bf18      	it	ne
 8000ed6:	4240      	negne	r0, r0
 8000ed8:	4770      	bx	lr
 8000eda:	f04f 0000 	mov.w	r0, #0
 8000ede:	4770      	bx	lr
 8000ee0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ee4:	d101      	bne.n	8000eea <__aeabi_f2iz+0x3a>
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	d105      	bne.n	8000ef6 <__aeabi_f2iz+0x46>
 8000eea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eee:	bf08      	it	eq
 8000ef0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ef4:	4770      	bx	lr
 8000ef6:	f04f 0000 	mov.w	r0, #0
 8000efa:	4770      	bx	lr

08000efc <HAL_TIM_PWM_PulseFinishedCallback>:

int val = 0;
int eff = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000f04:	2100      	movs	r1, #0
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f08:	f002 fd8e 	bl	8003a28 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000002c 	.word	0x2000002c
 8000f20:	20000184 	.word	0x20000184

08000f24 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	b2d9      	uxtb	r1, r3
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <Set_LED+0x54>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	LED_Data[LEDnum][1] = Green;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	b2d9      	uxtb	r1, r3
 8000f42:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <Set_LED+0x54>)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4413      	add	r3, r2
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	b2d9      	uxtb	r1, r3
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <Set_LED+0x54>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4413      	add	r3, r2
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2d9      	uxtb	r1, r3
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <Set_LED+0x54>)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4413      	add	r3, r2
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	70da      	strb	r2, [r3, #3]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	20000188 	.word	0x20000188
 8000f7c:	00000000 	.word	0x00000000

08000f80 <Set_Brightness>:

static void Set_Brightness (int brightness)  // 0-45
{
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f8c:	dd01      	ble.n	8000f92 <Set_Brightness+0x12>
 8000f8e:	232d      	movs	r3, #45	; 0x2d
 8000f90:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e05f      	b.n	8001058 <Set_Brightness+0xd8>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000f98:	4a35      	ldr	r2, [pc, #212]	; (8001070 <Set_Brightness+0xf0>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8000fa0:	4a34      	ldr	r2, [pc, #208]	; (8001074 <Set_Brightness+0xf4>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		for (int j=1; j<4; j++)
 8000fa8:	2301      	movs	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	e04e      	b.n	800104c <Set_Brightness+0xcc>
		{
			float angle = 90-brightness;  // in degrees
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff27 	bl	8000e08 <__aeabi_i2f>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff fade 	bl	8000580 <__aeabi_f2d>
 8000fc4:	a328      	add	r3, pc, #160	; (adr r3, 8001068 <Set_Brightness+0xe8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb31 	bl	8000630 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <Set_Brightness+0xf8>)
 8000fdc:	f7ff fc52 	bl	8000884 <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fe04 	bl	8000bf4 <__aeabi_d2f>
 8000fec:	4603      	mov	r3, r0
 8000fee:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000ff0:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <Set_Brightness+0xf0>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	441a      	add	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faac 	bl	800055c <__aeabi_i2d>
 8001004:	4604      	mov	r4, r0
 8001006:	460d      	mov	r5, r1
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff fab9 	bl	8000580 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f003 ff5f 	bl	8004ed8 <tan>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4620      	mov	r0, r4
 8001020:	4629      	mov	r1, r5
 8001022:	f7ff fc2f 	bl	8000884 <__aeabi_ddiv>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fdc1 	bl	8000bb4 <__aeabi_d2uiz>
 8001032:	4603      	mov	r3, r0
 8001034:	b2d9      	uxtb	r1, r3
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <Set_Brightness+0xf4>)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	441a      	add	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4413      	add	r3, r2
 8001042:	460a      	mov	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3301      	adds	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2b03      	cmp	r3, #3
 8001050:	ddad      	ble.n	8000fae <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b17      	cmp	r3, #23
 800105c:	dd9c      	ble.n	8000f98 <Set_Brightness+0x18>
		}
	}

#endif
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bdb0      	pop	{r4, r5, r7, pc}
 8001068:	53c8d4f1 	.word	0x53c8d4f1
 800106c:	400921fb 	.word	0x400921fb
 8001070:	20000188 	.word	0x20000188
 8001074:	20000248 	.word	0x20000248
 8001078:	40668000 	.word	0x40668000

0800107c <WS2812_Send>:

static void WS2812_Send (void)
	{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
		uint32_t indx=0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
		uint32_t color;
		for (int i= 0; i<MAX_LED; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e036      	b.n	80010fa <WS2812_Send+0x7e>
		{
	#if USE_BRIGHTNESS
			color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 800108c:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <WS2812_Send+0xcc>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	492b      	ldr	r1, [pc, #172]	; (8001148 <WS2812_Send+0xcc>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	789b      	ldrb	r3, [r3, #2]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	431a      	orrs	r2, r3
 80010a6:	4928      	ldr	r1, [pc, #160]	; (8001148 <WS2812_Send+0xcc>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	78db      	ldrb	r3, [r3, #3]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	607b      	str	r3, [r7, #4]
	#else
			color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
	#endif

			for (int i=23; i>=0; i--)
 80010b4:	2317      	movs	r3, #23
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e019      	b.n	80010ee <WS2812_Send+0x72>
			{
				if (color&(1<<i))
 80010ba:	2201      	movs	r2, #1
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <WS2812_Send+0x5c>
				{
					pwmData[indx] = 60;  // 2/3 of 90
 80010cc:	4a1f      	ldr	r2, [pc, #124]	; (800114c <WS2812_Send+0xd0>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	213c      	movs	r1, #60	; 0x3c
 80010d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010d6:	e004      	b.n	80010e2 <WS2812_Send+0x66>
				}
				else pwmData[indx] = 30;  // 1/3 of 90
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <WS2812_Send+0xd0>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	211e      	movs	r1, #30
 80010de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				indx++;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
			for (int i=23; i>=0; i--)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	dae2      	bge.n	80010ba <WS2812_Send+0x3e>
		for (int i= 0; i<MAX_LED; i++)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	3301      	adds	r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	2b17      	cmp	r3, #23
 80010fe:	ddc5      	ble.n	800108c <WS2812_Send+0x10>
			}
		}
		for (int i=0; i<50; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	e00a      	b.n	800111c <WS2812_Send+0xa0>
		{
			pwmData[indx] = 0;
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <WS2812_Send+0xd0>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2100      	movs	r1, #0
 800110c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
		for (int i=0; i<50; i++)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b31      	cmp	r3, #49	; 0x31
 8001120:	ddf1      	ble.n	8001106 <WS2812_Send+0x8a>
		}

		HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <WS2812_Send+0xd0>)
 8001128:	2100      	movs	r1, #0
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <WS2812_Send+0xd4>)
 800112c:	f002 fae2 	bl	80036f4 <HAL_TIM_PWM_Start_DMA>
		while (!datasentflag){};
 8001130:	bf00      	nop
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <WS2812_Send+0xd8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <WS2812_Send+0xb6>
		datasentflag = 0;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <WS2812_Send+0xd8>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
	}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000248 	.word	0x20000248
 800114c:	20000310 	.word	0x20000310
 8001150:	2000002c 	.word	0x2000002c
 8001154:	20000184 	.word	0x20000184

08001158 <rainbow_effect_left>:
			LED_Data[i][2] = 0;
			LED_Data[i][3] = 0;
		}
	}

static uint8_t rainbow_effect_left() {
 8001158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
	    // Options: rainbowlen=8, toLeft=true,
	//  if(millis() - strip_0.effStart < 54 * (strip_0.effStep)) return 0x00;

	  float factor1, factor2;
	  uint16_t ind;
	  for(uint16_t j=0;j<24;j++) {
 8001160:	2300      	movs	r3, #0
 8001162:	81fb      	strh	r3, [r7, #14]
 8001164:	e244      	b.n	80015f0 <rainbow_effect_left+0x498>
	    ind = effStep + j * 1.625;
 8001166:	4bc6      	ldr	r3, [pc, #792]	; (8001480 <rainbow_effect_left+0x328>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9f6 	bl	800055c <__aeabi_i2d>
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9f0 	bl	800055c <__aeabi_i2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4bc0      	ldr	r3, [pc, #768]	; (8001484 <rainbow_effect_left+0x32c>)
 8001182:	f7ff fa55 	bl	8000630 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff f899 	bl	80002c4 <__adddf3>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fd0b 	bl	8000bb4 <__aeabi_d2uiz>
 800119e:	4603      	mov	r3, r0
 80011a0:	81bb      	strh	r3, [r7, #12]
	    switch((int)((ind % 13) / 4.333333333333333)) {
 80011a2:	89b9      	ldrh	r1, [r7, #12]
 80011a4:	4bb8      	ldr	r3, [pc, #736]	; (8001488 <rainbow_effect_left+0x330>)
 80011a6:	fba3 2301 	umull	r2, r3, r3, r1
 80011aa:	089a      	lsrs	r2, r3, #2
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	1acb      	subs	r3, r1, r3
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f9ce 	bl	800055c <__aeabi_i2d>
 80011c0:	a3ad      	add	r3, pc, #692	; (adr r3, 8001478 <rainbow_effect_left+0x320>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fb5d 	bl	8000884 <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fcc7 	bl	8000b64 <__aeabi_d2iz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b02      	cmp	r3, #2
 80011da:	f000 815b 	beq.w	8001494 <rainbow_effect_left+0x33c>
 80011de:	2b02      	cmp	r3, #2
 80011e0:	f300 8203 	bgt.w	80015ea <rainbow_effect_left+0x492>
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <rainbow_effect_left+0x98>
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	f000 8098 	beq.w	800131e <rainbow_effect_left+0x1c6>
 80011ee:	e1fc      	b.n	80015ea <rainbow_effect_left+0x492>
	      case 0: factor1 = 1.0 - ((float)(ind % 13 - 0 * 4.333333333333333) / 4.333333333333333);
 80011f0:	89b9      	ldrh	r1, [r7, #12]
 80011f2:	4ba5      	ldr	r3, [pc, #660]	; (8001488 <rainbow_effect_left+0x330>)
 80011f4:	fba3 2301 	umull	r2, r3, r3, r1
 80011f8:	089a      	lsrs	r2, r3, #2
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	1acb      	subs	r3, r1, r3
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9a7 	bl	800055c <__aeabi_i2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fced 	bl	8000bf4 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f9af 	bl	8000580 <__aeabi_f2d>
 8001222:	a395      	add	r3, pc, #596	; (adr r3, 8001478 <rainbow_effect_left+0x320>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff fb2c 	bl	8000884 <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	f04f 0000 	mov.w	r0, #0
 8001234:	4995      	ldr	r1, [pc, #596]	; (800148c <rainbow_effect_left+0x334>)
 8001236:	f7ff f843 	bl	80002c0 <__aeabi_dsub>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fcd7 	bl	8000bf4 <__aeabi_d2f>
 8001246:	4603      	mov	r3, r0
 8001248:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 0) % 13) / 4.333333333333333;
 800124a:	89b9      	ldrh	r1, [r7, #12]
 800124c:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <rainbow_effect_left+0x330>)
 800124e:	fb83 2301 	smull	r2, r3, r3, r1
 8001252:	109a      	asrs	r2, r3, #2
 8001254:	17cb      	asrs	r3, r1, #31
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	1aca      	subs	r2, r1, r3
 8001264:	4610      	mov	r0, r2
 8001266:	f7ff fdcf 	bl	8000e08 <__aeabi_i2f>
 800126a:	4603      	mov	r3, r0
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f987 	bl	8000580 <__aeabi_f2d>
 8001272:	a381      	add	r3, pc, #516	; (adr r3, 8001478 <rainbow_effect_left+0x320>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff fb04 	bl	8000884 <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fcb6 	bl	8000bf4 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	607b      	str	r3, [r7, #4]
	              /************ chnaged here *********/
	              Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
 800128c:	89fc      	ldrh	r4, [r7, #14]
 800128e:	4980      	ldr	r1, [pc, #512]	; (8001490 <rainbow_effect_left+0x338>)
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f7fe ff5d 	bl	8000150 <__aeabi_fmul>
 8001296:	4603      	mov	r3, r0
 8001298:	461d      	mov	r5, r3
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7fe ff56 	bl	8000150 <__aeabi_fmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff fcf9 	bl	8000ca0 <__addsf3>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fdfd 	bl	8000eb0 <__aeabi_f2iz>
 80012b6:	4605      	mov	r5, r0
 80012b8:	f04f 0100 	mov.w	r1, #0
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f7fe ff47 	bl	8000150 <__aeabi_fmul>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461e      	mov	r6, r3
 80012c6:	4972      	ldr	r1, [pc, #456]	; (8001490 <rainbow_effect_left+0x338>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7fe ff41 	bl	8000150 <__aeabi_fmul>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4630      	mov	r0, r6
 80012d4:	f7ff fce4 	bl	8000ca0 <__addsf3>
 80012d8:	4603      	mov	r3, r0
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fde8 	bl	8000eb0 <__aeabi_f2iz>
 80012e0:	4606      	mov	r6, r0
 80012e2:	f04f 0100 	mov.w	r1, #0
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f7fe ff32 	bl	8000150 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4698      	mov	r8, r3
 80012f0:	f04f 0100 	mov.w	r1, #0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7fe ff2b 	bl	8000150 <__aeabi_fmul>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4619      	mov	r1, r3
 80012fe:	4640      	mov	r0, r8
 8001300:	f7ff fcce 	bl	8000ca0 <__addsf3>
 8001304:	4603      	mov	r3, r0
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fdd2 	bl	8000eb0 <__aeabi_f2iz>
 800130c:	4603      	mov	r3, r0
 800130e:	4632      	mov	r2, r6
 8001310:	4629      	mov	r1, r5
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fe06 	bl	8000f24 <Set_LED>
	              WS2812_Send();
 8001318:	f7ff feb0 	bl	800107c <WS2812_Send>
	              break;
 800131c:	e165      	b.n	80015ea <rainbow_effect_left+0x492>
	      case 1: factor1 = 1.0 - ((float)(ind % 13 - 1 * 4.333333333333333) / 4.333333333333333);
 800131e:	89b9      	ldrh	r1, [r7, #12]
 8001320:	4b59      	ldr	r3, [pc, #356]	; (8001488 <rainbow_effect_left+0x330>)
 8001322:	fba3 2301 	umull	r2, r3, r3, r1
 8001326:	089a      	lsrs	r2, r3, #2
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	1acb      	subs	r3, r1, r3
 8001334:	b29b      	uxth	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f910 	bl	800055c <__aeabi_i2d>
 800133c:	a34e      	add	r3, pc, #312	; (adr r3, 8001478 <rainbow_effect_left+0x320>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7fe ffbd 	bl	80002c0 <__aeabi_dsub>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fc51 	bl	8000bf4 <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f913 	bl	8000580 <__aeabi_f2d>
 800135a:	a347      	add	r3, pc, #284	; (adr r3, 8001478 <rainbow_effect_left+0x320>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff fa90 	bl	8000884 <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	f04f 0000 	mov.w	r0, #0
 800136c:	4947      	ldr	r1, [pc, #284]	; (800148c <rainbow_effect_left+0x334>)
 800136e:	f7fe ffa7 	bl	80002c0 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fc3b 	bl	8000bf4 <__aeabi_d2f>
 800137e:	4603      	mov	r3, r0
 8001380:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 4.333333333333333) % 13) / 4.333333333333333;
 8001382:	89bb      	ldrh	r3, [r7, #12]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8e9 	bl	800055c <__aeabi_i2d>
 800138a:	a33b      	add	r3, pc, #236	; (adr r3, 8001478 <rainbow_effect_left+0x320>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7fe ff96 	bl	80002c0 <__aeabi_dsub>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fbe2 	bl	8000b64 <__aeabi_d2iz>
 80013a0:	4601      	mov	r1, r0
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <rainbow_effect_left+0x330>)
 80013a4:	fb83 2301 	smull	r2, r3, r3, r1
 80013a8:	109a      	asrs	r2, r3, #2
 80013aa:	17cb      	asrs	r3, r1, #31
 80013ac:	1ad2      	subs	r2, r2, r3
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	1aca      	subs	r2, r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f7ff fd24 	bl	8000e08 <__aeabi_i2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8dc 	bl	8000580 <__aeabi_f2d>
 80013c8:	a32b      	add	r3, pc, #172	; (adr r3, 8001478 <rainbow_effect_left+0x320>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff fa59 	bl	8000884 <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc0b 	bl	8000bf4 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 80013e2:	89fc      	ldrh	r4, [r7, #14]
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f7fe feb1 	bl	8000150 <__aeabi_fmul>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461d      	mov	r5, r3
 80013f2:	f04f 0100 	mov.w	r1, #0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7fe feaa 	bl	8000150 <__aeabi_fmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4619      	mov	r1, r3
 8001400:	4628      	mov	r0, r5
 8001402:	f7ff fc4d 	bl	8000ca0 <__addsf3>
 8001406:	4603      	mov	r3, r0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fd51 	bl	8000eb0 <__aeabi_f2iz>
 800140e:	4605      	mov	r5, r0
 8001410:	491f      	ldr	r1, [pc, #124]	; (8001490 <rainbow_effect_left+0x338>)
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f7fe fe9c 	bl	8000150 <__aeabi_fmul>
 8001418:	4603      	mov	r3, r0
 800141a:	461e      	mov	r6, r3
 800141c:	f04f 0100 	mov.w	r1, #0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7fe fe95 	bl	8000150 <__aeabi_fmul>
 8001426:	4603      	mov	r3, r0
 8001428:	4619      	mov	r1, r3
 800142a:	4630      	mov	r0, r6
 800142c:	f7ff fc38 	bl	8000ca0 <__addsf3>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fd3c 	bl	8000eb0 <__aeabi_f2iz>
 8001438:	4606      	mov	r6, r0
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	68b8      	ldr	r0, [r7, #8]
 8001440:	f7fe fe86 	bl	8000150 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	4698      	mov	r8, r3
 8001448:	4911      	ldr	r1, [pc, #68]	; (8001490 <rainbow_effect_left+0x338>)
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7fe fe80 	bl	8000150 <__aeabi_fmul>
 8001450:	4603      	mov	r3, r0
 8001452:	4619      	mov	r1, r3
 8001454:	4640      	mov	r0, r8
 8001456:	f7ff fc23 	bl	8000ca0 <__addsf3>
 800145a:	4603      	mov	r3, r0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fd27 	bl	8000eb0 <__aeabi_f2iz>
 8001462:	4603      	mov	r3, r0
 8001464:	4632      	mov	r2, r6
 8001466:	4629      	mov	r1, r5
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff fd5b 	bl	8000f24 <Set_LED>
	              WS2812_Send();
 800146e:	f7ff fe05 	bl	800107c <WS2812_Send>
	              break;
 8001472:	e0ba      	b.n	80015ea <rainbow_effect_left+0x492>
 8001474:	f3af 8000 	nop.w
 8001478:	55555555 	.word	0x55555555
 800147c:	40115555 	.word	0x40115555
 8001480:	20000000 	.word	0x20000000
 8001484:	3ffa0000 	.word	0x3ffa0000
 8001488:	4ec4ec4f 	.word	0x4ec4ec4f
 800148c:	3ff00000 	.word	0x3ff00000
 8001490:	437f0000 	.word	0x437f0000
	      case 2: factor1 = 1.0 - ((float)(ind % 13 - 2 * 4.333333333333333) / 4.333333333333333);
 8001494:	89b9      	ldrh	r1, [r7, #12]
 8001496:	4b68      	ldr	r3, [pc, #416]	; (8001638 <rainbow_effect_left+0x4e0>)
 8001498:	fba3 2301 	umull	r2, r3, r3, r1
 800149c:	089a      	lsrs	r2, r3, #2
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	1acb      	subs	r3, r1, r3
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f855 	bl	800055c <__aeabi_i2d>
 80014b2:	a35d      	add	r3, pc, #372	; (adr r3, 8001628 <rainbow_effect_left+0x4d0>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7fe ff02 	bl	80002c0 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fb96 	bl	8000bf4 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f858 	bl	8000580 <__aeabi_f2d>
 80014d0:	a357      	add	r3, pc, #348	; (adr r3, 8001630 <rainbow_effect_left+0x4d8>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f9d5 	bl	8000884 <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	f04f 0000 	mov.w	r0, #0
 80014e2:	4956      	ldr	r1, [pc, #344]	; (800163c <rainbow_effect_left+0x4e4>)
 80014e4:	f7fe feec 	bl	80002c0 <__aeabi_dsub>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fb80 	bl	8000bf4 <__aeabi_d2f>
 80014f4:	4603      	mov	r3, r0
 80014f6:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 8.666666666666666) % 13) / 4.333333333333333;
 80014f8:	89bb      	ldrh	r3, [r7, #12]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f82e 	bl	800055c <__aeabi_i2d>
 8001500:	a349      	add	r3, pc, #292	; (adr r3, 8001628 <rainbow_effect_left+0x4d0>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fedb 	bl	80002c0 <__aeabi_dsub>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb27 	bl	8000b64 <__aeabi_d2iz>
 8001516:	4601      	mov	r1, r0
 8001518:	4b47      	ldr	r3, [pc, #284]	; (8001638 <rainbow_effect_left+0x4e0>)
 800151a:	fb83 2301 	smull	r2, r3, r3, r1
 800151e:	109a      	asrs	r2, r3, #2
 8001520:	17cb      	asrs	r3, r1, #31
 8001522:	1ad2      	subs	r2, r2, r3
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	1aca      	subs	r2, r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff fc69 	bl	8000e08 <__aeabi_i2f>
 8001536:	4603      	mov	r3, r0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f821 	bl	8000580 <__aeabi_f2d>
 800153e:	a33c      	add	r3, pc, #240	; (adr r3, 8001630 <rainbow_effect_left+0x4d8>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f99e 	bl	8000884 <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb50 	bl	8000bf4 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 8001558:	89fc      	ldrh	r4, [r7, #14]
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7fe fdf6 	bl	8000150 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	461d      	mov	r5, r3
 8001568:	4935      	ldr	r1, [pc, #212]	; (8001640 <rainbow_effect_left+0x4e8>)
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7fe fdf0 	bl	8000150 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4628      	mov	r0, r5
 8001576:	f7ff fb93 	bl	8000ca0 <__addsf3>
 800157a:	4603      	mov	r3, r0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fc97 	bl	8000eb0 <__aeabi_f2iz>
 8001582:	4605      	mov	r5, r0
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f7fe fde1 	bl	8000150 <__aeabi_fmul>
 800158e:	4603      	mov	r3, r0
 8001590:	461e      	mov	r6, r3
 8001592:	f04f 0100 	mov.w	r1, #0
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7fe fdda 	bl	8000150 <__aeabi_fmul>
 800159c:	4603      	mov	r3, r0
 800159e:	4619      	mov	r1, r3
 80015a0:	4630      	mov	r0, r6
 80015a2:	f7ff fb7d 	bl	8000ca0 <__addsf3>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fc81 	bl	8000eb0 <__aeabi_f2iz>
 80015ae:	4606      	mov	r6, r0
 80015b0:	4923      	ldr	r1, [pc, #140]	; (8001640 <rainbow_effect_left+0x4e8>)
 80015b2:	68b8      	ldr	r0, [r7, #8]
 80015b4:	f7fe fdcc 	bl	8000150 <__aeabi_fmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4698      	mov	r8, r3
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7fe fdc5 	bl	8000150 <__aeabi_fmul>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4640      	mov	r0, r8
 80015cc:	f7ff fb68 	bl	8000ca0 <__addsf3>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fc6c 	bl	8000eb0 <__aeabi_f2iz>
 80015d8:	4603      	mov	r3, r0
 80015da:	4632      	mov	r2, r6
 80015dc:	4629      	mov	r1, r5
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff fca0 	bl	8000f24 <Set_LED>
	              WS2812_Send();
 80015e4:	f7ff fd4a 	bl	800107c <WS2812_Send>
	              break;
 80015e8:	bf00      	nop
	  for(uint16_t j=0;j<24;j++) {
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	3301      	adds	r3, #1
 80015ee:	81fb      	strh	r3, [r7, #14]
 80015f0:	89fb      	ldrh	r3, [r7, #14]
 80015f2:	2b17      	cmp	r3, #23
 80015f4:	f67f adb7 	bls.w	8001166 <rainbow_effect_left+0xe>
	    }
	  }
	  if(effStep >= 13) {effStep=0; return 0x03; }
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <rainbow_effect_left+0x4ec>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	d904      	bls.n	800160a <rainbow_effect_left+0x4b2>
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <rainbow_effect_left+0x4ec>)
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	2303      	movs	r3, #3
 8001608:	e006      	b.n	8001618 <rainbow_effect_left+0x4c0>
	  else effStep++;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <rainbow_effect_left+0x4ec>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <rainbow_effect_left+0x4ec>)
 8001614:	801a      	strh	r2, [r3, #0]
	  return 0x01;
 8001616:	2301      	movs	r3, #1
	}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	55555555 	.word	0x55555555
 800162c:	40215555 	.word	0x40215555
 8001630:	55555555 	.word	0x55555555
 8001634:	40115555 	.word	0x40115555
 8001638:	4ec4ec4f 	.word	0x4ec4ec4f
 800163c:	3ff00000 	.word	0x3ff00000
 8001640:	437f0000 	.word	0x437f0000
 8001644:	20000000 	.word	0x20000000

08001648 <rainbow_effect_right>:

static uint8_t rainbow_effect_right() {
 8001648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
	    // Colors: 3 (255.0.0, 0.255.0, 0.0.255)
	    // Options: rainbowlen=8, toLeft=false,
	//  if(millis() - strip_0.effStart < 30 * (strip_0.effStep)) return 0x00;
	  float factor1, factor2;
	  uint16_t ind;
	  for(uint16_t j=0;j<24;j++) {
 8001650:	2300      	movs	r3, #0
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	e26b      	b.n	8001b2e <rainbow_effect_right+0x4e6>
	    ind = 14 - (int16_t)(effStep - j * 1.75) % 14;
 8001656:	4b84      	ldr	r3, [pc, #528]	; (8001868 <rainbow_effect_right+0x220>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff7e 	bl	800055c <__aeabi_i2d>
 8001660:	4604      	mov	r4, r0
 8001662:	460d      	mov	r5, r1
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff78 	bl	800055c <__aeabi_i2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b7e      	ldr	r3, [pc, #504]	; (800186c <rainbow_effect_right+0x224>)
 8001672:	f7fe ffdd 	bl	8000630 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe1f 	bl	80002c0 <__aeabi_dsub>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa6b 	bl	8000b64 <__aeabi_d2iz>
 800168e:	4603      	mov	r3, r0
 8001690:	b21a      	sxth	r2, r3
 8001692:	4b77      	ldr	r3, [pc, #476]	; (8001870 <rainbow_effect_right+0x228>)
 8001694:	fb83 1302 	smull	r1, r3, r3, r2
 8001698:	4413      	add	r3, r2
 800169a:	10d9      	asrs	r1, r3, #3
 800169c:	17d3      	asrs	r3, r2, #31
 800169e:	1ac9      	subs	r1, r1, r3
 80016a0:	460b      	mov	r3, r1
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	1a5b      	subs	r3, r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f1c3 030e 	rsb	r3, r3, #14
 80016b2:	81bb      	strh	r3, [r7, #12]
	    switch((int)((ind % 14) / 4.666666666666667)) {
 80016b4:	89ba      	ldrh	r2, [r7, #12]
 80016b6:	0853      	lsrs	r3, r2, #1
 80016b8:	496d      	ldr	r1, [pc, #436]	; (8001870 <rainbow_effect_right+0x228>)
 80016ba:	fba1 1303 	umull	r1, r3, r1, r3
 80016be:	0899      	lsrs	r1, r3, #2
 80016c0:	460b      	mov	r3, r1
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	1a5b      	subs	r3, r3, r1
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff45 	bl	800055c <__aeabi_i2d>
 80016d2:	a361      	add	r3, pc, #388	; (adr r3, 8001858 <rainbow_effect_right+0x210>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7ff f8d4 	bl	8000884 <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa3e 	bl	8000b64 <__aeabi_d2iz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	f000 8171 	beq.w	80019d2 <rainbow_effect_right+0x38a>
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	f300 8219 	bgt.w	8001b28 <rainbow_effect_right+0x4e0>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <rainbow_effect_right+0xba>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	f000 80be 	beq.w	800187c <rainbow_effect_right+0x234>
 8001700:	e212      	b.n	8001b28 <rainbow_effect_right+0x4e0>
	      case 0: /*factor1 = 1.0 - ((float)(ind % 14 - 0 * 4.666666666666667) / 4.666666666666667);
	              factor2 = (float)((int)(ind - 0) % 14) / 4.666666666666667;
	              Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
	              WS2812_Send();
	              break;*/
	    	  factor1 = 1.0 - ((float)(ind % 14 - 2 * 4.666666666666667) / 4.666666666666667);
 8001702:	89ba      	ldrh	r2, [r7, #12]
 8001704:	0853      	lsrs	r3, r2, #1
 8001706:	495a      	ldr	r1, [pc, #360]	; (8001870 <rainbow_effect_right+0x228>)
 8001708:	fba1 1303 	umull	r1, r3, r1, r3
 800170c:	0899      	lsrs	r1, r3, #2
 800170e:	460b      	mov	r3, r1
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	1a5b      	subs	r3, r3, r1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b29b      	uxth	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff1e 	bl	800055c <__aeabi_i2d>
 8001720:	a34f      	add	r3, pc, #316	; (adr r3, 8001860 <rainbow_effect_right+0x218>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe fdcb 	bl	80002c0 <__aeabi_dsub>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff fa5f 	bl	8000bf4 <__aeabi_d2f>
 8001736:	4603      	mov	r3, r0
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff21 	bl	8000580 <__aeabi_f2d>
 800173e:	a346      	add	r3, pc, #280	; (adr r3, 8001858 <rainbow_effect_right+0x210>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f89e 	bl	8000884 <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	f04f 0000 	mov.w	r0, #0
 8001750:	4948      	ldr	r1, [pc, #288]	; (8001874 <rainbow_effect_right+0x22c>)
 8001752:	f7fe fdb5 	bl	80002c0 <__aeabi_dsub>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff fa49 	bl	8000bf4 <__aeabi_d2f>
 8001762:	4603      	mov	r3, r0
 8001764:	60bb      	str	r3, [r7, #8]
	    	  	              factor2 = (float)((int)(ind - 9.333333333333334) % 14) / 4.666666666666667;
 8001766:	89bb      	ldrh	r3, [r7, #12]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fef7 	bl	800055c <__aeabi_i2d>
 800176e:	a33c      	add	r3, pc, #240	; (adr r3, 8001860 <rainbow_effect_right+0x218>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe fda4 	bl	80002c0 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f9f0 	bl	8000b64 <__aeabi_d2iz>
 8001784:	4602      	mov	r2, r0
 8001786:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <rainbow_effect_right+0x228>)
 8001788:	fb83 1302 	smull	r1, r3, r3, r2
 800178c:	4413      	add	r3, r2
 800178e:	10d9      	asrs	r1, r3, #3
 8001790:	17d3      	asrs	r3, r2, #31
 8001792:	1ac9      	subs	r1, r1, r3
 8001794:	460b      	mov	r3, r1
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	1a5b      	subs	r3, r3, r1
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	1ad1      	subs	r1, r2, r3
 800179e:	4608      	mov	r0, r1
 80017a0:	f7ff fb32 	bl	8000e08 <__aeabi_i2f>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe feea 	bl	8000580 <__aeabi_f2d>
 80017ac:	a32a      	add	r3, pc, #168	; (adr r3, 8001858 <rainbow_effect_right+0x210>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7ff f867 	bl	8000884 <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff fa19 	bl	8000bf4 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	607b      	str	r3, [r7, #4]
	    	  	              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 80017c6:	89fc      	ldrh	r4, [r7, #14]
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	68b8      	ldr	r0, [r7, #8]
 80017ce:	f7fe fcbf 	bl	8000150 <__aeabi_fmul>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461d      	mov	r5, r3
 80017d6:	4928      	ldr	r1, [pc, #160]	; (8001878 <rainbow_effect_right+0x230>)
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7fe fcb9 	bl	8000150 <__aeabi_fmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4628      	mov	r0, r5
 80017e4:	f7ff fa5c 	bl	8000ca0 <__addsf3>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fb60 	bl	8000eb0 <__aeabi_f2iz>
 80017f0:	4605      	mov	r5, r0
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	68b8      	ldr	r0, [r7, #8]
 80017f8:	f7fe fcaa 	bl	8000150 <__aeabi_fmul>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461e      	mov	r6, r3
 8001800:	f04f 0100 	mov.w	r1, #0
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7fe fca3 	bl	8000150 <__aeabi_fmul>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4630      	mov	r0, r6
 8001810:	f7ff fa46 	bl	8000ca0 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fb4a 	bl	8000eb0 <__aeabi_f2iz>
 800181c:	4606      	mov	r6, r0
 800181e:	4916      	ldr	r1, [pc, #88]	; (8001878 <rainbow_effect_right+0x230>)
 8001820:	68b8      	ldr	r0, [r7, #8]
 8001822:	f7fe fc95 	bl	8000150 <__aeabi_fmul>
 8001826:	4603      	mov	r3, r0
 8001828:	4698      	mov	r8, r3
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7fe fc8e 	bl	8000150 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
 8001836:	4619      	mov	r1, r3
 8001838:	4640      	mov	r0, r8
 800183a:	f7ff fa31 	bl	8000ca0 <__addsf3>
 800183e:	4603      	mov	r3, r0
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fb35 	bl	8000eb0 <__aeabi_f2iz>
 8001846:	4603      	mov	r3, r0
 8001848:	4632      	mov	r2, r6
 800184a:	4629      	mov	r1, r5
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff fb69 	bl	8000f24 <Set_LED>
	    	  	              WS2812_Send();
 8001852:	f7ff fc13 	bl	800107c <WS2812_Send>
	    	  	              break;
 8001856:	e167      	b.n	8001b28 <rainbow_effect_right+0x4e0>
 8001858:	aaaaaaab 	.word	0xaaaaaaab
 800185c:	4012aaaa 	.word	0x4012aaaa
 8001860:	aaaaaaab 	.word	0xaaaaaaab
 8001864:	4022aaaa 	.word	0x4022aaaa
 8001868:	20000000 	.word	0x20000000
 800186c:	3ffc0000 	.word	0x3ffc0000
 8001870:	92492493 	.word	0x92492493
 8001874:	3ff00000 	.word	0x3ff00000
 8001878:	437f0000 	.word	0x437f0000

	      case 1: factor1 = 1.0 - ((float)(ind % 14 - 1 * 4.666666666666667) / 4.666666666666667);
 800187c:	89ba      	ldrh	r2, [r7, #12]
 800187e:	0853      	lsrs	r3, r2, #1
 8001880:	49bb      	ldr	r1, [pc, #748]	; (8001b70 <rainbow_effect_right+0x528>)
 8001882:	fba1 1303 	umull	r1, r3, r1, r3
 8001886:	0899      	lsrs	r1, r3, #2
 8001888:	460b      	mov	r3, r1
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	1a5b      	subs	r3, r3, r1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe61 	bl	800055c <__aeabi_i2d>
 800189a:	a3b1      	add	r3, pc, #708	; (adr r3, 8001b60 <rainbow_effect_right+0x518>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe fd0e 	bl	80002c0 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f9a2 	bl	8000bf4 <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe64 	bl	8000580 <__aeabi_f2d>
 80018b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8001b60 <rainbow_effect_right+0x518>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe ffe1 	bl	8000884 <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	49aa      	ldr	r1, [pc, #680]	; (8001b74 <rainbow_effect_right+0x52c>)
 80018cc:	f7fe fcf8 	bl	80002c0 <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f98c 	bl	8000bf4 <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 4.666666666666667) % 14) / 4.666666666666667;
 80018e0:	89bb      	ldrh	r3, [r7, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe3a 	bl	800055c <__aeabi_i2d>
 80018e8:	a39d      	add	r3, pc, #628	; (adr r3, 8001b60 <rainbow_effect_right+0x518>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fce7 	bl	80002c0 <__aeabi_dsub>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f933 	bl	8000b64 <__aeabi_d2iz>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b9b      	ldr	r3, [pc, #620]	; (8001b70 <rainbow_effect_right+0x528>)
 8001902:	fb83 1302 	smull	r1, r3, r3, r2
 8001906:	4413      	add	r3, r2
 8001908:	10d9      	asrs	r1, r3, #3
 800190a:	17d3      	asrs	r3, r2, #31
 800190c:	1ac9      	subs	r1, r1, r3
 800190e:	460b      	mov	r3, r1
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a5b      	subs	r3, r3, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	1ad1      	subs	r1, r2, r3
 8001918:	4608      	mov	r0, r1
 800191a:	f7ff fa75 	bl	8000e08 <__aeabi_i2f>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe2d 	bl	8000580 <__aeabi_f2d>
 8001926:	a38e      	add	r3, pc, #568	; (adr r3, 8001b60 <rainbow_effect_right+0x518>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe ffaa 	bl	8000884 <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f95c 	bl	8000bf4 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 8001940:	89fc      	ldrh	r4, [r7, #14]
 8001942:	f04f 0100 	mov.w	r1, #0
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f7fe fc02 	bl	8000150 <__aeabi_fmul>
 800194c:	4603      	mov	r3, r0
 800194e:	461d      	mov	r5, r3
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7fe fbfb 	bl	8000150 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	4628      	mov	r0, r5
 8001960:	f7ff f99e 	bl	8000ca0 <__addsf3>
 8001964:	4603      	mov	r3, r0
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff faa2 	bl	8000eb0 <__aeabi_f2iz>
 800196c:	4605      	mov	r5, r0
 800196e:	4982      	ldr	r1, [pc, #520]	; (8001b78 <rainbow_effect_right+0x530>)
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	f7fe fbed 	bl	8000150 <__aeabi_fmul>
 8001976:	4603      	mov	r3, r0
 8001978:	461e      	mov	r6, r3
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7fe fbe6 	bl	8000150 <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	4619      	mov	r1, r3
 8001988:	4630      	mov	r0, r6
 800198a:	f7ff f989 	bl	8000ca0 <__addsf3>
 800198e:	4603      	mov	r3, r0
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fa8d 	bl	8000eb0 <__aeabi_f2iz>
 8001996:	4606      	mov	r6, r0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f7fe fbd7 	bl	8000150 <__aeabi_fmul>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4698      	mov	r8, r3
 80019a6:	4974      	ldr	r1, [pc, #464]	; (8001b78 <rainbow_effect_right+0x530>)
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7fe fbd1 	bl	8000150 <__aeabi_fmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4619      	mov	r1, r3
 80019b2:	4640      	mov	r0, r8
 80019b4:	f7ff f974 	bl	8000ca0 <__addsf3>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fa78 	bl	8000eb0 <__aeabi_f2iz>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4632      	mov	r2, r6
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff faac 	bl	8000f24 <Set_LED>
	              WS2812_Send();
 80019cc:	f7ff fb56 	bl	800107c <WS2812_Send>
	              break;
 80019d0:	e0aa      	b.n	8001b28 <rainbow_effect_right+0x4e0>
	      case 2: factor1 = 1.0 - ((float)(ind % 14 - 2 * 4.666666666666667) / 4.666666666666667);
 80019d2:	89ba      	ldrh	r2, [r7, #12]
 80019d4:	0853      	lsrs	r3, r2, #1
 80019d6:	4966      	ldr	r1, [pc, #408]	; (8001b70 <rainbow_effect_right+0x528>)
 80019d8:	fba1 1303 	umull	r1, r3, r1, r3
 80019dc:	0899      	lsrs	r1, r3, #2
 80019de:	460b      	mov	r3, r1
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	1a5b      	subs	r3, r3, r1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdb6 	bl	800055c <__aeabi_i2d>
 80019f0:	a35d      	add	r3, pc, #372	; (adr r3, 8001b68 <rainbow_effect_right+0x520>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fc63 	bl	80002c0 <__aeabi_dsub>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8f7 	bl	8000bf4 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdb9 	bl	8000580 <__aeabi_f2d>
 8001a0e:	a354      	add	r3, pc, #336	; (adr r3, 8001b60 <rainbow_effect_right+0x518>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe ff36 	bl	8000884 <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	4954      	ldr	r1, [pc, #336]	; (8001b74 <rainbow_effect_right+0x52c>)
 8001a22:	f7fe fc4d 	bl	80002c0 <__aeabi_dsub>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f8e1 	bl	8000bf4 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 9.333333333333334) % 14) / 4.666666666666667;
 8001a36:	89bb      	ldrh	r3, [r7, #12]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd8f 	bl	800055c <__aeabi_i2d>
 8001a3e:	a34a      	add	r3, pc, #296	; (adr r3, 8001b68 <rainbow_effect_right+0x520>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fc3c 	bl	80002c0 <__aeabi_dsub>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f888 	bl	8000b64 <__aeabi_d2iz>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <rainbow_effect_right+0x528>)
 8001a58:	fb83 1302 	smull	r1, r3, r3, r2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	10d9      	asrs	r1, r3, #3
 8001a60:	17d3      	asrs	r3, r2, #31
 8001a62:	1ac9      	subs	r1, r1, r3
 8001a64:	460b      	mov	r3, r1
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	1a5b      	subs	r3, r3, r1
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	1ad1      	subs	r1, r2, r3
 8001a6e:	4608      	mov	r0, r1
 8001a70:	f7ff f9ca 	bl	8000e08 <__aeabi_i2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd82 	bl	8000580 <__aeabi_f2d>
 8001a7c:	a338      	add	r3, pc, #224	; (adr r3, 8001b60 <rainbow_effect_right+0x518>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe feff 	bl	8000884 <__aeabi_ddiv>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f8b1 	bl	8000bf4 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 8001a96:	89fc      	ldrh	r4, [r7, #14]
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	68b8      	ldr	r0, [r7, #8]
 8001a9e:	f7fe fb57 	bl	8000150 <__aeabi_fmul>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	4934      	ldr	r1, [pc, #208]	; (8001b78 <rainbow_effect_right+0x530>)
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7fe fb51 	bl	8000150 <__aeabi_fmul>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f7ff f8f4 	bl	8000ca0 <__addsf3>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f9f8 	bl	8000eb0 <__aeabi_f2iz>
 8001ac0:	4605      	mov	r5, r0
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	68b8      	ldr	r0, [r7, #8]
 8001ac8:	f7fe fb42 	bl	8000150 <__aeabi_fmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461e      	mov	r6, r3
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7fe fb3b 	bl	8000150 <__aeabi_fmul>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4619      	mov	r1, r3
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f7ff f8de 	bl	8000ca0 <__addsf3>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f9e2 	bl	8000eb0 <__aeabi_f2iz>
 8001aec:	4606      	mov	r6, r0
 8001aee:	4922      	ldr	r1, [pc, #136]	; (8001b78 <rainbow_effect_right+0x530>)
 8001af0:	68b8      	ldr	r0, [r7, #8]
 8001af2:	f7fe fb2d 	bl	8000150 <__aeabi_fmul>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4698      	mov	r8, r3
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe fb26 	bl	8000150 <__aeabi_fmul>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4619      	mov	r1, r3
 8001b08:	4640      	mov	r0, r8
 8001b0a:	f7ff f8c9 	bl	8000ca0 <__addsf3>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f9cd 	bl	8000eb0 <__aeabi_f2iz>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4632      	mov	r2, r6
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff fa01 	bl	8000f24 <Set_LED>
	              WS2812_Send();
 8001b22:	f7ff faab 	bl	800107c <WS2812_Send>
	              break;
 8001b26:	bf00      	nop
	  for(uint16_t j=0;j<24;j++) {
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	81fb      	strh	r3, [r7, #14]
 8001b2e:	89fb      	ldrh	r3, [r7, #14]
 8001b30:	2b17      	cmp	r3, #23
 8001b32:	f67f ad90 	bls.w	8001656 <rainbow_effect_right+0xe>
	    }
	  }
	  if(effStep >= 14) {effStep = 0; return 0x03; }
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <rainbow_effect_right+0x534>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	2b0d      	cmp	r3, #13
 8001b3c:	d904      	bls.n	8001b48 <rainbow_effect_right+0x500>
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <rainbow_effect_right+0x534>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	2303      	movs	r3, #3
 8001b46:	e006      	b.n	8001b56 <rainbow_effect_right+0x50e>
	  else effStep++;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <rainbow_effect_right+0x534>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <rainbow_effect_right+0x534>)
 8001b52:	801a      	strh	r2, [r3, #0]
	  return 0x01;
 8001b54:	2301      	movs	r3, #1
	}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b60:	aaaaaaab 	.word	0xaaaaaaab
 8001b64:	4012aaaa 	.word	0x4012aaaa
 8001b68:	aaaaaaab 	.word	0xaaaaaaab
 8001b6c:	4022aaaa 	.word	0x4022aaaa
 8001b70:	92492493 	.word	0x92492493
 8001b74:	3ff00000 	.word	0x3ff00000
 8001b78:	437f0000 	.word	0x437f0000
 8001b7c:	20000000 	.word	0x20000000

08001b80 <white_effect>:

static void white_effect (void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
		for(uint8_t j=0;j<24;j++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	e00a      	b.n	8001ba2 <white_effect+0x22>
		  Set_LED(j, 255, 255, 255);
 8001b8c:	79f8      	ldrb	r0, [r7, #7]
 8001b8e:	23ff      	movs	r3, #255	; 0xff
 8001b90:	22ff      	movs	r2, #255	; 0xff
 8001b92:	21ff      	movs	r1, #255	; 0xff
 8001b94:	f7ff f9c6 	bl	8000f24 <Set_LED>
		  WS2812_Send();
 8001b98:	f7ff fa70 	bl	800107c <WS2812_Send>
		for(uint8_t j=0;j<24;j++) {
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b17      	cmp	r3, #23
 8001ba6:	d9f1      	bls.n	8001b8c <white_effect+0xc>
		}
	}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb8:	f000 fb7a 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bbc:	f000 f860 	bl	8001c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc0:	f000 f954 	bl	8001e6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001bc4:	f000 f924 	bl	8001e10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001bc8:	f000 f8f8 	bl	8001dbc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001bcc:	f000 f89e 	bl	8001d0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, RxBuf, 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <main+0xbc>)
 8001bd4:	4827      	ldr	r0, [pc, #156]	; (8001c74 <main+0xc0>)
 8001bd6:	f002 fc40 	bl	800445a <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart1, MainBuf, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4926      	ldr	r1, [pc, #152]	; (8001c78 <main+0xc4>)
 8001bde:	4825      	ldr	r0, [pc, #148]	; (8001c74 <main+0xc0>)
 8001be0:	f002 fc3b 	bl	800445a <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_DMA(&huart1, RxBuf, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	4922      	ldr	r1, [pc, #136]	; (8001c70 <main+0xbc>)
 8001be8:	4822      	ldr	r0, [pc, #136]	; (8001c74 <main+0xc0>)
 8001bea:	f002 fc36 	bl	800445a <HAL_UART_Receive_DMA>
    switch (*RxBuf){
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <main+0xbc>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b91      	cmp	r3, #145	; 0x91
 8001bf4:	dcf6      	bgt.n	8001be4 <main+0x30>
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	da28      	bge.n	8001c4c <main+0x98>
 8001bfa:	2b2d      	cmp	r3, #45	; 0x2d
 8001bfc:	dc02      	bgt.n	8001c04 <main+0x50>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da04      	bge.n	8001c0c <main+0x58>
 8001c02:	e033      	b.n	8001c6c <main+0xb8>
 8001c04:	3b32      	subs	r3, #50	; 0x32
 8001c06:	2b2d      	cmp	r3, #45	; 0x2d
 8001c08:	d8ec      	bhi.n	8001be4 <main+0x30>
 8001c0a:	e00f      	b.n	8001c2c <main+0x78>
		case 0 ... 45:

		    rainbow_effect_left();
 8001c0c:	f7ff faa4 	bl	8001158 <rainbow_effect_left>
	        val = *RxBuf;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <main+0xbc>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <main+0xc8>)
 8001c18:	601a      	str	r2, [r3, #0]
		    Set_Brightness(val);
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <main+0xc8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f9ae 	bl	8000f80 <Set_Brightness>
		    //HAL_UART_Transmit_DMA(&huart1,(uint8_t*)ptr1, 1);
		    //HAL_UART_Transmit(&huart1, (uint8_t*)ptr1, 1, 100);
            HAL_Delay(1);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f000 fba5 	bl	8002374 <HAL_Delay>
			break;
 8001c2a:	e01f      	b.n	8001c6c <main+0xb8>

		case 50 ... 95:
		    rainbow_effect_right();
 8001c2c:	f7ff fd0c 	bl	8001648 <rainbow_effect_right>
		    val = *RxBuf -50;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <main+0xbc>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3b32      	subs	r3, #50	; 0x32
 8001c36:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <main+0xc8>)
 8001c38:	6013      	str	r3, [r2, #0]
			Set_Brightness(val);
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <main+0xc8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f99e 	bl	8000f80 <Set_Brightness>
			 //HAL_UART_Transmit_DMA(&huart1,(uint8_t*)ptr2, 1);
			 //HAL_UART_Transmit(&huart1, (uint8_t*)ptr2, 1, 100);
			 HAL_Delay(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f000 fb95 	bl	8002374 <HAL_Delay>
			break;
 8001c4a:	e00f      	b.n	8001c6c <main+0xb8>

		case 100 ... 145:
		    white_effect();
 8001c4c:	f7ff ff98 	bl	8001b80 <white_effect>
		    val = *RxBuf -100;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <main+0xbc>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	3b64      	subs	r3, #100	; 0x64
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <main+0xc8>)
 8001c58:	6013      	str	r3, [r2, #0]
			Set_Brightness(val);
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <main+0xc8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f98e 	bl	8000f80 <Set_Brightness>
			//HAL_UART_Transmit_DMA(&huart1,(uint8_t*)ptr3, 1);
			//HAL_UART_Transmit(&huart1, (uint8_t*)ptr3, 1, 100);
			HAL_Delay(1);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f000 fb85 	bl	8002374 <HAL_Delay>
			break;
 8001c6a:	bf00      	nop
    HAL_UART_Receive_DMA(&huart1, RxBuf, 1);
 8001c6c:	e7ba      	b.n	8001be4 <main+0x30>
 8001c6e:	bf00      	nop
 8001c70:	20000308 	.word	0x20000308
 8001c74:	200000b8 	.word	0x200000b8
 8001c78:	2000030c 	.word	0x2000030c
 8001c7c:	200007f4 	.word	0x200007f4

08001c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b090      	sub	sp, #64	; 0x40
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	2228      	movs	r2, #40	; 0x28
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 f91a 	bl	8004ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001caa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 f8a6 	bl	8002e1c <HAL_RCC_OscConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001cd6:	f000 f8f7 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cda:	230f      	movs	r3, #15
 8001cdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fb13 	bl	8003320 <HAL_RCC_ClockConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001d00:	f000 f8e2 	bl	8001ec8 <Error_Handler>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3740      	adds	r7, #64	; 0x40
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d12:	f107 0320 	add.w	r3, r7, #32
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d30:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <MX_TIM3_Init+0xac>)
 8001d32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d42:	2259      	movs	r2, #89	; 0x59
 8001d44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d52:	4818      	ldr	r0, [pc, #96]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d54:	f001 fc7e 	bl	8003654 <HAL_TIM_PWM_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001d5e:	f000 f8b3 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4810      	ldr	r0, [pc, #64]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d72:	f002 fac7 	bl	8004304 <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001d7c:	f000 f8a4 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d80:	2360      	movs	r3, #96	; 0x60
 8001d82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001d98:	f001 ff04 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001da2:	f000 f891 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <MX_TIM3_Init+0xa8>)
 8001da8:	f000 f916 	bl	8001fd8 <HAL_TIM_MspPostInit>

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000002c 	.word	0x2000002c
 8001db8:	40000400 	.word	0x40000400

08001dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <MX_USART1_UART_Init+0x50>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001df4:	f002 fae4 	bl	80043c0 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dfe:	f000 f863 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200000b8 	.word	0x200000b8
 8001e0c:	40013800 	.word	0x40013800

08001e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_DMA_Init+0x58>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <MX_DMA_Init+0x58>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6153      	str	r3, [r2, #20]
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_DMA_Init+0x58>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	200e      	movs	r0, #14
 8001e34:	f000 fb99 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e38:	200e      	movs	r0, #14
 8001e3a:	f000 fbb2 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	200f      	movs	r0, #15
 8001e44:	f000 fb91 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e48:	200f      	movs	r0, #15
 8001e4a:	f000 fbaa 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2010      	movs	r0, #16
 8001e54:	f000 fb89 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e58:	2010      	movs	r0, #16
 8001e5a:	f000 fba2 	bl	80025a2 <HAL_NVIC_EnableIRQ>

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000

08001e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6193      	str	r3, [r2, #24]
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001ea8:	f043 0308 	orr.w	r3, r3, #8
 8001eac:	6193      	str	r3, [r2, #24]
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <MX_GPIO_Init+0x58>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x8>
	...

08001ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_MspInit+0x5c>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6193      	str	r3, [r2, #24]
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_MspInit+0x60>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_MspInit+0x60>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000

08001f38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <HAL_TIM_PWM_MspInit+0x90>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d139      	bne.n	8001fbe <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_TIM_PWM_MspInit+0x94>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <HAL_TIM_PWM_MspInit+0x94>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_TIM_PWM_MspInit+0x94>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_TIM_PWM_MspInit+0x9c>)
 8001f66:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f80:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f88:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001f96:	480e      	ldr	r0, [pc, #56]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001f98:	f000 fb1e 	bl	80025d8 <HAL_DMA_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8001fa2:	f7ff ff91 	bl	8001ec8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
 8001fac:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8001fb8:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x98>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	20000074 	.word	0x20000074
 8001fd4:	4002006c 	.word	0x4002006c

08001fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_TIM_MspPostInit+0x7c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d129      	bne.n	800204c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_TIM_MspPostInit+0x80>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a16      	ldr	r2, [pc, #88]	; (8002058 <HAL_TIM_MspPostInit+0x80>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_TIM_MspPostInit+0x80>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002010:	2310      	movs	r3, #16
 8002012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4619      	mov	r1, r3
 8002022:	480e      	ldr	r0, [pc, #56]	; (800205c <HAL_TIM_MspPostInit+0x84>)
 8002024:	f000 fd76 	bl	8002b14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_TIM_MspPostInit+0x88>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	4a06      	ldr	r2, [pc, #24]	; (8002060 <HAL_TIM_MspPostInit+0x88>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40000400 	.word	0x40000400
 8002058:	40021000 	.word	0x40021000
 800205c:	40010c00 	.word	0x40010c00
 8002060:	40010000 	.word	0x40010000

08002064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a47      	ldr	r2, [pc, #284]	; (800219c <HAL_UART_MspInit+0x138>)
 8002080:	4293      	cmp	r3, r2
 8002082:	f040 8086 	bne.w	8002192 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002086:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <HAL_UART_MspInit+0x13c>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	4a45      	ldr	r2, [pc, #276]	; (80021a0 <HAL_UART_MspInit+0x13c>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6193      	str	r3, [r2, #24]
 8002092:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <HAL_UART_MspInit+0x13c>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <HAL_UART_MspInit+0x13c>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4a3f      	ldr	r2, [pc, #252]	; (80021a0 <HAL_UART_MspInit+0x13c>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6193      	str	r3, [r2, #24]
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_UART_MspInit+0x13c>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4619      	mov	r1, r3
 80020ca:	4836      	ldr	r0, [pc, #216]	; (80021a4 <HAL_UART_MspInit+0x140>)
 80020cc:	f000 fd22 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 0310 	add.w	r3, r7, #16
 80020e2:	4619      	mov	r1, r3
 80020e4:	482f      	ldr	r0, [pc, #188]	; (80021a4 <HAL_UART_MspInit+0x140>)
 80020e6:	f000 fd15 	bl	8002b14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80020ea:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_UART_MspInit+0x144>)
 80020ec:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <HAL_UART_MspInit+0x148>)
 80020ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_UART_MspInit+0x144>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f6:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_UART_MspInit+0x144>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_UART_MspInit+0x144>)
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_UART_MspInit+0x144>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_UART_MspInit+0x144>)
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_UART_MspInit+0x144>)
 8002110:	2220      	movs	r2, #32
 8002112:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_UART_MspInit+0x144>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800211a:	4823      	ldr	r0, [pc, #140]	; (80021a8 <HAL_UART_MspInit+0x144>)
 800211c:	f000 fa5c 	bl	80025d8 <HAL_DMA_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002126:	f7ff fecf 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <HAL_UART_MspInit+0x144>)
 800212e:	639a      	str	r2, [r3, #56]	; 0x38
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_UART_MspInit+0x144>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_UART_MspInit+0x150>)
 800213a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 800213e:	2210      	movs	r2, #16
 8002140:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002166:	4812      	ldr	r0, [pc, #72]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 8002168:	f000 fa36 	bl	80025d8 <HAL_DMA_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002172:	f7ff fea9 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <HAL_UART_MspInit+0x14c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	2025      	movs	r0, #37	; 0x25
 8002188:	f000 f9ef 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800218c:	2025      	movs	r0, #37	; 0x25
 800218e:	f000 fa08 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40013800 	.word	0x40013800
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010800 	.word	0x40010800
 80021a8:	200000fc 	.word	0x200000fc
 80021ac:	40020058 	.word	0x40020058
 80021b0:	20000140 	.word	0x20000140
 80021b4:	40020044 	.word	0x40020044

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <NMI_Handler+0x4>

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fe:	f000 f89d 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <DMA1_Channel4_IRQHandler+0x10>)
 800220e:	f000 fb4d 	bl	80028ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000140 	.word	0x20000140

0800221c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <DMA1_Channel5_IRQHandler+0x10>)
 8002222:	f000 fb43 	bl	80028ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200000fc 	.word	0x200000fc

08002230 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <DMA1_Channel6_IRQHandler+0x10>)
 8002236:	f000 fb39 	bl	80028ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000074 	.word	0x20000074

08002244 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <USART1_IRQHandler+0x10>)
 800224a:	f002 f937 	bl	80044bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200000b8 	.word	0x200000b8

08002258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	; (800229c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800228a:	f7ff ffe5 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800228e:	f002 fdf7 	bl	8004e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002292:	f7ff fc8f 	bl	8001bb4 <main>
  bx lr
 8002296:	4770      	bx	lr
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80022a0:	080061c8 	.word	0x080061c8
  ldr r2, =_sbss
 80022a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80022a8:	200007fc 	.word	0x200007fc

080022ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_2_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_Init+0x28>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_Init+0x28>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f000 f947 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c6:	200f      	movs	r0, #15
 80022c8:	f000 f808 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022cc:	f7ff fe02 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x54>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x58>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f95f 	bl	80025be <HAL_SYSTICK_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00e      	b.n	8002328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d80a      	bhi.n	8002326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f000 f927 	bl	800256a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_InitTick+0x5c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000004 	.word	0x20000004
 8002334:	2000000c 	.word	0x2000000c
 8002338:	20000008 	.word	0x20000008

0800233c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_IncTick+0x1c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_IncTick+0x20>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_IncTick+0x20>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	2000000c 	.word	0x2000000c
 800235c:	200007f8 	.word	0x200007f8

08002360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_GetTick+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	200007f8 	.word	0x200007f8

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff fff0 	bl	8002360 <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffe0 	bl	8002360 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000000c 	.word	0x2000000c

080023bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4906      	ldr	r1, [pc, #24]	; (8002454 <__NVIC_EnableIRQ+0x34>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f7ff ff90 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff2d 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800257c:	f7ff ff42 	bl	8002404 <__NVIC_GetPriorityGrouping>
 8002580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff90 	bl	80024ac <NVIC_EncodePriority>
 800258c:	4602      	mov	r2, r0
 800258e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff5f 	bl	8002458 <__NVIC_SetPriority>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff35 	bl	8002420 <__NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffa2 	bl	8002510 <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e043      	b.n	8002676 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_DMA_Init+0xa8>)
 80025f6:	4413      	add	r3, r2
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_DMA_Init+0xac>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_DMA_Init+0xb0>)
 800260a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002622:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	bffdfff8 	.word	0xbffdfff8
 8002684:	cccccccd 	.word	0xcccccccd
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_DMA_Start_IT+0x20>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e04a      	b.n	8002742 <HAL_DMA_Start_IT+0xb6>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d13a      	bne.n	8002734 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f9e8 	bl	8002ab8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 020e 	orr.w	r2, r2, #14
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e00f      	b.n	8002722 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0204 	bic.w	r2, r2, #4
 8002710:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 020a 	orr.w	r2, r2, #10
 8002720:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e005      	b.n	8002740 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800273c:	2302      	movs	r3, #2
 800273e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002740:	7dfb      	ldrb	r3, [r7, #23]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800275c:	2b02      	cmp	r3, #2
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2204      	movs	r2, #4
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e020      	b.n	80027b4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 020e 	bic.w	r2, r2, #14
 8002780:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d005      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2204      	movs	r2, #4
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e051      	b.n	8002886 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 020e 	bic.w	r2, r2, #14
 80027f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_DMA_Abort_IT+0xd0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d029      	beq.n	8002860 <HAL_DMA_Abort_IT+0xa0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <HAL_DMA_Abort_IT+0xd4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d022      	beq.n	800285c <HAL_DMA_Abort_IT+0x9c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_DMA_Abort_IT+0xd8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d01a      	beq.n	8002856 <HAL_DMA_Abort_IT+0x96>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <HAL_DMA_Abort_IT+0xdc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d012      	beq.n	8002850 <HAL_DMA_Abort_IT+0x90>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_DMA_Abort_IT+0xe0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00a      	beq.n	800284a <HAL_DMA_Abort_IT+0x8a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <HAL_DMA_Abort_IT+0xe4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d102      	bne.n	8002844 <HAL_DMA_Abort_IT+0x84>
 800283e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002842:	e00e      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 8002844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002848:	e00b      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 800284a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800284e:	e008      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 8002850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002854:	e005      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 8002856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800285a:	e002      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 800285c:	2310      	movs	r3, #16
 800285e:	e000      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 8002860:	2301      	movs	r3, #1
 8002862:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_DMA_Abort_IT+0xe8>)
 8002864:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
    } 
  }
  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40020008 	.word	0x40020008
 8002894:	4002001c 	.word	0x4002001c
 8002898:	40020030 	.word	0x40020030
 800289c:	40020044 	.word	0x40020044
 80028a0:	40020058 	.word	0x40020058
 80028a4:	4002006c 	.word	0x4002006c
 80028a8:	40020000 	.word	0x40020000

080028ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	2204      	movs	r2, #4
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d04f      	beq.n	8002974 <HAL_DMA_IRQHandler+0xc8>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04a      	beq.n	8002974 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a66      	ldr	r2, [pc, #408]	; (8002a9c <HAL_DMA_IRQHandler+0x1f0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d029      	beq.n	800295a <HAL_DMA_IRQHandler+0xae>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_DMA_IRQHandler+0x1f4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_DMA_IRQHandler+0xaa>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a63      	ldr	r2, [pc, #396]	; (8002aa4 <HAL_DMA_IRQHandler+0x1f8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01a      	beq.n	8002950 <HAL_DMA_IRQHandler+0xa4>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a62      	ldr	r2, [pc, #392]	; (8002aa8 <HAL_DMA_IRQHandler+0x1fc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d012      	beq.n	800294a <HAL_DMA_IRQHandler+0x9e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a60      	ldr	r2, [pc, #384]	; (8002aac <HAL_DMA_IRQHandler+0x200>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00a      	beq.n	8002944 <HAL_DMA_IRQHandler+0x98>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a5f      	ldr	r2, [pc, #380]	; (8002ab0 <HAL_DMA_IRQHandler+0x204>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d102      	bne.n	800293e <HAL_DMA_IRQHandler+0x92>
 8002938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800293c:	e00e      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 800293e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002942:	e00b      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 8002944:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002948:	e008      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 800294a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800294e:	e005      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 8002950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002954:	e002      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	e000      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 800295a:	2304      	movs	r3, #4
 800295c:	4a55      	ldr	r2, [pc, #340]	; (8002ab4 <HAL_DMA_IRQHandler+0x208>)
 800295e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8094 	beq.w	8002a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002972:	e08e      	b.n	8002a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2202      	movs	r2, #2
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d056      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x186>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d051      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020a 	bic.w	r2, r2, #10
 80029aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <HAL_DMA_IRQHandler+0x1f0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d029      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x166>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a37      	ldr	r2, [pc, #220]	; (8002aa0 <HAL_DMA_IRQHandler+0x1f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x162>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a35      	ldr	r2, [pc, #212]	; (8002aa4 <HAL_DMA_IRQHandler+0x1f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x15c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_DMA_IRQHandler+0x1fc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d012      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x156>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a32      	ldr	r2, [pc, #200]	; (8002aac <HAL_DMA_IRQHandler+0x200>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00a      	beq.n	80029fc <HAL_DMA_IRQHandler+0x150>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <HAL_DMA_IRQHandler+0x204>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d102      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x14a>
 80029f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029f4:	e00e      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 80029f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fa:	e00b      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 80029fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a00:	e008      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 8002a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a06:	e005      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 8002a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0c:	e002      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e000      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 8002a12:	2302      	movs	r3, #2
 8002a14:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <HAL_DMA_IRQHandler+0x208>)
 8002a16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d034      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a30:	e02f      	b.n	8002a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2208      	movs	r2, #8
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d028      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x1e8>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d023      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 020e 	bic.w	r2, r2, #14
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
    }
  }
  return;
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
}
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40020008 	.word	0x40020008
 8002aa0:	4002001c 	.word	0x4002001c
 8002aa4:	40020030 	.word	0x40020030
 8002aa8:	40020044 	.word	0x40020044
 8002aac:	40020058 	.word	0x40020058
 8002ab0:	4002006c 	.word	0x4002006c
 8002ab4:	40020000 	.word	0x40020000

08002ab8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d108      	bne.n	8002af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002af6:	e007      	b.n	8002b08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b08b      	sub	sp, #44	; 0x2c
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b26:	e169      	b.n	8002dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8158 	bne.w	8002df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a9a      	ldr	r2, [pc, #616]	; (8002db4 <HAL_GPIO_Init+0x2a0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d05e      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b50:	4a98      	ldr	r2, [pc, #608]	; (8002db4 <HAL_GPIO_Init+0x2a0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d875      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b56:	4a98      	ldr	r2, [pc, #608]	; (8002db8 <HAL_GPIO_Init+0x2a4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d058      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b5c:	4a96      	ldr	r2, [pc, #600]	; (8002db8 <HAL_GPIO_Init+0x2a4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d86f      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b62:	4a96      	ldr	r2, [pc, #600]	; (8002dbc <HAL_GPIO_Init+0x2a8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d052      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b68:	4a94      	ldr	r2, [pc, #592]	; (8002dbc <HAL_GPIO_Init+0x2a8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d869      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b6e:	4a94      	ldr	r2, [pc, #592]	; (8002dc0 <HAL_GPIO_Init+0x2ac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d04c      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b74:	4a92      	ldr	r2, [pc, #584]	; (8002dc0 <HAL_GPIO_Init+0x2ac>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d863      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b7a:	4a92      	ldr	r2, [pc, #584]	; (8002dc4 <HAL_GPIO_Init+0x2b0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d046      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b80:	4a90      	ldr	r2, [pc, #576]	; (8002dc4 <HAL_GPIO_Init+0x2b0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d85d      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d82a      	bhi.n	8002be0 <HAL_GPIO_Init+0xcc>
 8002b8a:	2b12      	cmp	r3, #18
 8002b8c:	d859      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <HAL_GPIO_Init+0x80>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002c0f 	.word	0x08002c0f
 8002b98:	08002be9 	.word	0x08002be9
 8002b9c:	08002bfb 	.word	0x08002bfb
 8002ba0:	08002c3d 	.word	0x08002c3d
 8002ba4:	08002c43 	.word	0x08002c43
 8002ba8:	08002c43 	.word	0x08002c43
 8002bac:	08002c43 	.word	0x08002c43
 8002bb0:	08002c43 	.word	0x08002c43
 8002bb4:	08002c43 	.word	0x08002c43
 8002bb8:	08002c43 	.word	0x08002c43
 8002bbc:	08002c43 	.word	0x08002c43
 8002bc0:	08002c43 	.word	0x08002c43
 8002bc4:	08002c43 	.word	0x08002c43
 8002bc8:	08002c43 	.word	0x08002c43
 8002bcc:	08002c43 	.word	0x08002c43
 8002bd0:	08002c43 	.word	0x08002c43
 8002bd4:	08002c43 	.word	0x08002c43
 8002bd8:	08002bf1 	.word	0x08002bf1
 8002bdc:	08002c05 	.word	0x08002c05
 8002be0:	4a79      	ldr	r2, [pc, #484]	; (8002dc8 <HAL_GPIO_Init+0x2b4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002be6:	e02c      	b.n	8002c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	623b      	str	r3, [r7, #32]
          break;
 8002bee:	e029      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	623b      	str	r3, [r7, #32]
          break;
 8002bf8:	e024      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	3308      	adds	r3, #8
 8002c00:	623b      	str	r3, [r7, #32]
          break;
 8002c02:	e01f      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	623b      	str	r3, [r7, #32]
          break;
 8002c0c:	e01a      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c16:	2304      	movs	r3, #4
 8002c18:	623b      	str	r3, [r7, #32]
          break;
 8002c1a:	e013      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c24:	2308      	movs	r3, #8
 8002c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	611a      	str	r2, [r3, #16]
          break;
 8002c2e:	e009      	b.n	8002c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c30:	2308      	movs	r3, #8
 8002c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	615a      	str	r2, [r3, #20]
          break;
 8002c3a:	e003      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
          break;
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          break;
 8002c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2bff      	cmp	r3, #255	; 0xff
 8002c48:	d801      	bhi.n	8002c4e <HAL_GPIO_Init+0x13a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	e001      	b.n	8002c52 <HAL_GPIO_Init+0x13e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2bff      	cmp	r3, #255	; 0xff
 8002c58:	d802      	bhi.n	8002c60 <HAL_GPIO_Init+0x14c>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	e002      	b.n	8002c66 <HAL_GPIO_Init+0x152>
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	3b08      	subs	r3, #8
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	401a      	ands	r2, r3
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	431a      	orrs	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80b1 	beq.w	8002df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c94:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_GPIO_Init+0x2b8>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <HAL_GPIO_Init+0x2b8>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6193      	str	r3, [r2, #24]
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_GPIO_Init+0x2b8>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <HAL_GPIO_Init+0x2bc>)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a40      	ldr	r2, [pc, #256]	; (8002dd4 <HAL_GPIO_Init+0x2c0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d013      	beq.n	8002d00 <HAL_GPIO_Init+0x1ec>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3f      	ldr	r2, [pc, #252]	; (8002dd8 <HAL_GPIO_Init+0x2c4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00d      	beq.n	8002cfc <HAL_GPIO_Init+0x1e8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3e      	ldr	r2, [pc, #248]	; (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d007      	beq.n	8002cf8 <HAL_GPIO_Init+0x1e4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <HAL_GPIO_Init+0x2cc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_GPIO_Init+0x1e0>
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e006      	b.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	e004      	b.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e002      	b.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002d00:	2300      	movs	r3, #0
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	f002 0203 	and.w	r2, r2, #3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d12:	492f      	ldr	r1, [pc, #188]	; (8002dd0 <HAL_GPIO_Init+0x2bc>)
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	492c      	ldr	r1, [pc, #176]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4928      	ldr	r1, [pc, #160]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4922      	ldr	r1, [pc, #136]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	491e      	ldr	r1, [pc, #120]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4918      	ldr	r1, [pc, #96]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	4914      	ldr	r1, [pc, #80]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d021      	beq.n	8002de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	490e      	ldr	r1, [pc, #56]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60cb      	str	r3, [r1, #12]
 8002db0:	e021      	b.n	8002df6 <HAL_GPIO_Init+0x2e2>
 8002db2:	bf00      	nop
 8002db4:	10320000 	.word	0x10320000
 8002db8:	10310000 	.word	0x10310000
 8002dbc:	10220000 	.word	0x10220000
 8002dc0:	10210000 	.word	0x10210000
 8002dc4:	10120000 	.word	0x10120000
 8002dc8:	10110000 	.word	0x10110000
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40010800 	.word	0x40010800
 8002dd8:	40010c00 	.word	0x40010c00
 8002ddc:	40011000 	.word	0x40011000
 8002de0:	40011400 	.word	0x40011400
 8002de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	4909      	ldr	r1, [pc, #36]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	3301      	adds	r3, #1
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f47f ae8e 	bne.w	8002b28 <HAL_GPIO_Init+0x14>
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	372c      	adds	r7, #44	; 0x2c
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e272      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8087 	beq.w	8002f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3c:	4b92      	ldr	r3, [pc, #584]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d00c      	beq.n	8002e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e48:	4b8f      	ldr	r3, [pc, #572]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d112      	bne.n	8002e7a <HAL_RCC_OscConfig+0x5e>
 8002e54:	4b8c      	ldr	r3, [pc, #560]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d10b      	bne.n	8002e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e62:	4b89      	ldr	r3, [pc, #548]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d06c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x12c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d168      	bne.n	8002f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e24c      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x76>
 8002e84:	4b80      	ldr	r3, [pc, #512]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a7f      	ldr	r2, [pc, #508]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	e02e      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b7b      	ldr	r3, [pc, #492]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7a      	ldr	r2, [pc, #488]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b78      	ldr	r3, [pc, #480]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a77      	ldr	r2, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e01d      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xbc>
 8002ebe:	4b72      	ldr	r3, [pc, #456]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a71      	ldr	r2, [pc, #452]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b6f      	ldr	r3, [pc, #444]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6e      	ldr	r2, [pc, #440]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002ed8:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6a      	ldr	r2, [pc, #424]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a67      	ldr	r2, [pc, #412]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7ff fa32 	bl	8002360 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7ff fa2e 	bl	8002360 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e200      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe4>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7ff fa1e 	bl	8002360 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7ff fa1a 	bl	8002360 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1ec      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x10c>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d063      	beq.n	800301e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f56:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f62:	4b49      	ldr	r3, [pc, #292]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x18c>
 8002f6e:	4b46      	ldr	r3, [pc, #280]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d116      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x176>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1c0      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4939      	ldr	r1, [pc, #228]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	e03a      	b.n	800301e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_RCC_OscConfig+0x270>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7ff f9d3 	bl	8002360 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7ff f9cf 	bl	8002360 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1a1      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4927      	ldr	r1, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	e015      	b.n	800301e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff2:	4b26      	ldr	r3, [pc, #152]	; (800308c <HAL_RCC_OscConfig+0x270>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7ff f9b2 	bl	8002360 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7ff f9ae 	bl	8002360 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e180      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03a      	beq.n	80030a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d019      	beq.n	8003066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_RCC_OscConfig+0x274>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7ff f992 	bl	8002360 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7ff f98e 	bl	8002360 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e160      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_RCC_OscConfig+0x26c>)
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800305e:	2001      	movs	r0, #1
 8003060:	f000 fada 	bl	8003618 <RCC_Delay>
 8003064:	e01c      	b.n	80030a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_RCC_OscConfig+0x274>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7ff f978 	bl	8002360 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003072:	e00f      	b.n	8003094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7ff f974 	bl	8002360 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d908      	bls.n	8003094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e146      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	42420000 	.word	0x42420000
 8003090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e9      	bne.n	8003074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a6 	beq.w	80031fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b8b      	ldr	r3, [pc, #556]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a87      	ldr	r2, [pc, #540]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	61d3      	str	r3, [r2, #28]
 80030ca:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d118      	bne.n	8003118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b7f      	ldr	r3, [pc, #508]	; (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7e      	ldr	r2, [pc, #504]	; (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7ff f935 	bl	8002360 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fa:	f7ff f931 	bl	8002360 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b64      	cmp	r3, #100	; 0x64
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e103      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x312>
 8003120:	4b6f      	ldr	r3, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a6e      	ldr	r2, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	e02d      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x334>
 8003136:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a69      	ldr	r2, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	6213      	str	r3, [r2, #32]
 8003142:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a66      	ldr	r2, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	e01c      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d10c      	bne.n	8003172 <HAL_RCC_OscConfig+0x356>
 8003158:	4b61      	ldr	r3, [pc, #388]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a60      	ldr	r2, [pc, #384]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6213      	str	r3, [r2, #32]
 8003164:	4b5e      	ldr	r3, [pc, #376]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a5d      	ldr	r2, [pc, #372]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 8003172:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a5a      	ldr	r2, [pc, #360]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6213      	str	r3, [r2, #32]
 800317e:	4b58      	ldr	r3, [pc, #352]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a57      	ldr	r2, [pc, #348]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7ff f8e5 	bl	8002360 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7ff f8e1 	bl	8002360 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0b1      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <HAL_RCC_OscConfig+0x37e>
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7ff f8cf 	bl	8002360 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7ff f8cb 	bl	8002360 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e09b      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4a3b      	ldr	r2, [pc, #236]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8087 	beq.w	8003312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d061      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d146      	bne.n	80032a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7ff f89f 	bl	8002360 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003226:	f7ff f89b 	bl	8002360 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e06d      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003238:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d108      	bne.n	8003260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4921      	ldr	r1, [pc, #132]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a19      	ldr	r1, [r3, #32]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	430b      	orrs	r3, r1
 8003272:	491b      	ldr	r1, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7ff f86f 	bl	8002360 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7ff f86b 	bl	8002360 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e03d      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x46a>
 80032a4:	e035      	b.n	8003312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7ff f858 	bl	8002360 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7ff f854 	bl	8002360 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e026      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x498>
 80032d2:	e01e      	b.n	8003312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e019      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_OscConfig+0x500>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0d0      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d910      	bls.n	8003364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 0207 	bic.w	r2, r3, #7
 800334a:	4965      	ldr	r1, [pc, #404]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800339e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d040      	beq.n	8003440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d115      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e073      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06b      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b39      	ldr	r3, [pc, #228]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4936      	ldr	r1, [pc, #216]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003410:	f7fe ffa6 	bl	8002360 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fe ffa2 	bl	8002360 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e053      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d210      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0207 	bic.w	r2, r3, #7
 8003456:	4922      	ldr	r1, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1cc>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1d0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe ff04 	bl	80022dc <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	08005fd0 	.word	0x08005fd0
 80034ec:	20000004 	.word	0x20000004
 80034f0:	20000008 	.word	0x20000008

080034f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b490      	push	{r4, r7}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80034fc:	1d3c      	adds	r4, r7, #4
 80034fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003504:	f240 2301 	movw	r3, #513	; 0x201
 8003508:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800351e:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d002      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x40>
 800352e:	2b08      	cmp	r3, #8
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x46>
 8003532:	e02b      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003534:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003536:	623b      	str	r3, [r7, #32]
      break;
 8003538:	e02b      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	0c9b      	lsrs	r3, r3, #18
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	3328      	adds	r3, #40	; 0x28
 8003544:	443b      	add	r3, r7
 8003546:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800354a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d012      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	0c5b      	lsrs	r3, r3, #17
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	3328      	adds	r3, #40	; 0x28
 8003562:	443b      	add	r3, r7
 8003564:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003568:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800356e:	fb03 f202 	mul.w	r2, r3, r2
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e004      	b.n	8003586 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	623b      	str	r3, [r7, #32]
      break;
 800358a:	e002      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800358e:	623b      	str	r3, [r7, #32]
      break;
 8003590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003592:	6a3b      	ldr	r3, [r7, #32]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bc90      	pop	{r4, r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	08005fc0 	.word	0x08005fc0
 80035a4:	40021000 	.word	0x40021000
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	003d0900 	.word	0x003d0900
 80035b0:	007a1200 	.word	0x007a1200

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b02      	ldr	r3, [pc, #8]	; (80035c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr
 80035c4:	20000004 	.word	0x20000004

080035c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035cc:	f7ff fff2 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	0a1b      	lsrs	r3, r3, #8
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4903      	ldr	r1, [pc, #12]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08005fe0 	.word	0x08005fe0

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f4:	f7ff ffde 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	0adb      	lsrs	r3, r3, #11
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	08005fe0 	.word	0x08005fe0

08003618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <RCC_Delay+0x34>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <RCC_Delay+0x38>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0a5b      	lsrs	r3, r3, #9
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003634:	bf00      	nop
  }
  while (Delay --);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	60fa      	str	r2, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f9      	bne.n	8003634 <RCC_Delay+0x1c>
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	20000004 	.word	0x20000004
 8003650:	10624dd3 	.word	0x10624dd3

08003654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e041      	b.n	80036ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe fc5c 	bl	8001f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 fc28 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_TIM_PWM_Start_DMA+0x28>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e022      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x6e>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b04      	cmp	r3, #4
 8003720:	d109      	bne.n	8003736 <HAL_TIM_PWM_Start_DMA+0x42>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	e015      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d109      	bne.n	8003750 <HAL_TIM_PWM_Start_DMA+0x5c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e008      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
 8003768:	e14e      	b.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <HAL_TIM_PWM_Start_DMA+0x90>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e022      	b.n	80037ca <HAL_TIM_PWM_Start_DMA+0xd6>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b04      	cmp	r3, #4
 8003788:	d109      	bne.n	800379e <HAL_TIM_PWM_Start_DMA+0xaa>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	e015      	b.n	80037ca <HAL_TIM_PWM_Start_DMA+0xd6>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d109      	bne.n	80037b8 <HAL_TIM_PWM_Start_DMA+0xc4>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e008      	b.n	80037ca <HAL_TIM_PWM_Start_DMA+0xd6>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d024      	beq.n	8003818 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <HAL_TIM_PWM_Start_DMA+0xea>
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e114      	b.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_PWM_Start_DMA+0xfa>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	e016      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x128>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_PWM_Start_DMA+0x10a>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037fc:	e00e      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x128>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d104      	bne.n	800380e <HAL_TIM_PWM_Start_DMA+0x11a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380c:	e006      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x128>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003816:	e001      	b.n	800381c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0f5      	b.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b0c      	cmp	r3, #12
 8003820:	f200 80ae 	bhi.w	8003980 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <HAL_TIM_PWM_Start_DMA+0x138>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	08003861 	.word	0x08003861
 8003830:	08003981 	.word	0x08003981
 8003834:	08003981 	.word	0x08003981
 8003838:	08003981 	.word	0x08003981
 800383c:	080038a9 	.word	0x080038a9
 8003840:	08003981 	.word	0x08003981
 8003844:	08003981 	.word	0x08003981
 8003848:	08003981 	.word	0x08003981
 800384c:	080038f1 	.word	0x080038f1
 8003850:	08003981 	.word	0x08003981
 8003854:	08003981 	.word	0x08003981
 8003858:	08003981 	.word	0x08003981
 800385c:	08003939 	.word	0x08003939
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	4a6a      	ldr	r2, [pc, #424]	; (8003a10 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	4a69      	ldr	r2, [pc, #420]	; (8003a14 <HAL_TIM_PWM_Start_DMA+0x320>)
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	4a68      	ldr	r2, [pc, #416]	; (8003a18 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003876:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3334      	adds	r3, #52	; 0x34
 8003884:	461a      	mov	r2, r3
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	f7fe ff00 	bl	800268c <HAL_DMA_Start_IT>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0b8      	b.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	60da      	str	r2, [r3, #12]
      break;
 80038a6:	e06c      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	4a57      	ldr	r2, [pc, #348]	; (8003a14 <HAL_TIM_PWM_Start_DMA+0x320>)
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	4a56      	ldr	r2, [pc, #344]	; (8003a18 <HAL_TIM_PWM_Start_DMA+0x324>)
 80038be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3338      	adds	r3, #56	; 0x38
 80038cc:	461a      	mov	r2, r3
 80038ce:	887b      	ldrh	r3, [r7, #2]
 80038d0:	f7fe fedc 	bl	800268c <HAL_DMA_Start_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e094      	b.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038ec:	60da      	str	r2, [r3, #12]
      break;
 80038ee:	e048      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	4a46      	ldr	r2, [pc, #280]	; (8003a10 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a45      	ldr	r2, [pc, #276]	; (8003a14 <HAL_TIM_PWM_Start_DMA+0x320>)
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	4a44      	ldr	r2, [pc, #272]	; (8003a18 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003906:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	333c      	adds	r3, #60	; 0x3c
 8003914:	461a      	mov	r2, r3
 8003916:	887b      	ldrh	r3, [r7, #2]
 8003918:	f7fe feb8 	bl	800268c <HAL_DMA_Start_IT>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e070      	b.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003934:	60da      	str	r2, [r3, #12]
      break;
 8003936:	e024      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	4a33      	ldr	r2, [pc, #204]	; (8003a14 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a32      	ldr	r2, [pc, #200]	; (8003a18 <HAL_TIM_PWM_Start_DMA+0x324>)
 800394e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3340      	adds	r3, #64	; 0x40
 800395c:	461a      	mov	r2, r3
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	f7fe fe94 	bl	800268c <HAL_DMA_Start_IT>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04c      	b.n	8003a08 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800397c:	60da      	str	r2, [r3, #12]
      break;
 800397e:	e000      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003980:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fc96 	bl	80042bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a21      	ldr	r2, [pc, #132]	; (8003a1c <HAL_TIM_PWM_Start_DMA+0x328>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d107      	bne.n	80039aa <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_TIM_PWM_Start_DMA+0x328>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d009      	beq.n	80039d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <HAL_TIM_PWM_Start_DMA+0x330>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d111      	bne.n	80039f6 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d010      	beq.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	e007      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	08003dd7 	.word	0x08003dd7
 8003a14:	08003e7f 	.word	0x08003e7f
 8003a18:	08003d45 	.word	0x08003d45
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800

08003a28 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d855      	bhi.n	8003ae4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003ae5 	.word	0x08003ae5
 8003a48:	08003ae5 	.word	0x08003ae5
 8003a4c:	08003ae5 	.word	0x08003ae5
 8003a50:	08003a91 	.word	0x08003a91
 8003a54:	08003ae5 	.word	0x08003ae5
 8003a58:	08003ae5 	.word	0x08003ae5
 8003a5c:	08003ae5 	.word	0x08003ae5
 8003a60:	08003aad 	.word	0x08003aad
 8003a64:	08003ae5 	.word	0x08003ae5
 8003a68:	08003ae5 	.word	0x08003ae5
 8003a6c:	08003ae5 	.word	0x08003ae5
 8003a70:	08003ac9 	.word	0x08003ac9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fe99 	bl	80027c0 <HAL_DMA_Abort_IT>
      break;
 8003a8e:	e02a      	b.n	8003ae6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fe8b 	bl	80027c0 <HAL_DMA_Abort_IT>
      break;
 8003aaa:	e01c      	b.n	8003ae6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fe7d 	bl	80027c0 <HAL_DMA_Abort_IT>
      break;
 8003ac6:	e00e      	b.n	8003ae6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fe6f 	bl	80027c0 <HAL_DMA_Abort_IT>
      break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003ae4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fbe4 	bl	80042bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d117      	bne.n	8003b2e <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a1a      	ldr	r2, [r3, #32]
 8003b04:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <HAL_TIM_PWM_Stop_DMA+0x106>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1a      	ldr	r2, [r3, #32]
 8003b14:	f240 4344 	movw	r3, #1092	; 0x444
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d107      	bne.n	8003b2e <HAL_TIM_PWM_Stop_DMA+0x106>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <HAL_TIM_PWM_Stop_DMA+0x136>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	f240 4344 	movw	r3, #1092	; 0x444
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d107      	bne.n	8003b5e <HAL_TIM_PWM_Stop_DMA+0x136>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_PWM_Stop_DMA+0x146>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b6c:	e013      	b.n	8003b96 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Stop_DMA+0x156>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b7c:	e00b      	b.n	8003b96 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Stop_DMA+0x166>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8c:	e003      	b.n	8003b96 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40012c00 	.word	0x40012c00

08003ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e0ac      	b.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	f200 809f 	bhi.w	8003d0c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003d0d 	.word	0x08003d0d
 8003bdc:	08003d0d 	.word	0x08003d0d
 8003be0:	08003d0d 	.word	0x08003d0d
 8003be4:	08003c49 	.word	0x08003c49
 8003be8:	08003d0d 	.word	0x08003d0d
 8003bec:	08003d0d 	.word	0x08003d0d
 8003bf0:	08003d0d 	.word	0x08003d0d
 8003bf4:	08003c8b 	.word	0x08003c8b
 8003bf8:	08003d0d 	.word	0x08003d0d
 8003bfc:	08003d0d 	.word	0x08003d0d
 8003c00:	08003d0d 	.word	0x08003d0d
 8003c04:	08003ccb 	.word	0x08003ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f9cc 	bl	8003fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0208 	orr.w	r2, r2, #8
 8003c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0204 	bic.w	r2, r2, #4
 8003c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6999      	ldr	r1, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	619a      	str	r2, [r3, #24]
      break;
 8003c46:	e062      	b.n	8003d0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fa12 	bl	8004078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6999      	ldr	r1, [r3, #24]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	021a      	lsls	r2, r3, #8
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	619a      	str	r2, [r3, #24]
      break;
 8003c88:	e041      	b.n	8003d0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fa5b 	bl	800414c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0208 	orr.w	r2, r2, #8
 8003ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0204 	bic.w	r2, r2, #4
 8003cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69d9      	ldr	r1, [r3, #28]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	61da      	str	r2, [r3, #28]
      break;
 8003cc8:	e021      	b.n	8003d0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 faa5 	bl	8004220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	021a      	lsls	r2, r3, #8
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	61da      	str	r2, [r3, #28]
      break;
 8003d0a:	e000      	b.n	8003d0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d107      	bne.n	8003d6c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d6a:	e02a      	b.n	8003dc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d107      	bne.n	8003d86 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d84:	e01d      	b.n	8003dc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d107      	bne.n	8003da0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2204      	movs	r2, #4
 8003d94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9e:	e010      	b.n	8003dc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d107      	bne.n	8003dba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2208      	movs	r2, #8
 8003dae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003db8:	e003      	b.n	8003dc2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff ffb5 	bl	8003d32 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	771a      	strb	r2, [r3, #28]
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d10b      	bne.n	8003e06 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d136      	bne.n	8003e6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e04:	e031      	b.n	8003e6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d10b      	bne.n	8003e28 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2202      	movs	r2, #2
 8003e14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d125      	bne.n	8003e6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e26:	e020      	b.n	8003e6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d10b      	bne.n	8003e4a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2204      	movs	r2, #4
 8003e36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d114      	bne.n	8003e6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	e00f      	b.n	8003e6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d10a      	bne.n	8003e6a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2208      	movs	r2, #8
 8003e58:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7fd f846 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	771a      	strb	r2, [r3, #28]
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d103      	bne.n	8003e9e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	771a      	strb	r2, [r3, #28]
 8003e9c:	e019      	b.n	8003ed2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d103      	bne.n	8003eb0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	771a      	strb	r2, [r3, #28]
 8003eae:	e010      	b.n	8003ed2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d103      	bne.n	8003ec2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	771a      	strb	r2, [r3, #28]
 8003ec0:	e007      	b.n	8003ed2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d102      	bne.n	8003ed2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2208      	movs	r2, #8
 8003ed0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff ff24 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	771a      	strb	r2, [r3, #28]
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <TIM_Base_SetConfig+0xb8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_Base_SetConfig+0x30>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d007      	beq.n	8003f18 <TIM_Base_SetConfig+0x30>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <TIM_Base_SetConfig+0xbc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_Base_SetConfig+0x30>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a25      	ldr	r2, [pc, #148]	; (8003fa8 <TIM_Base_SetConfig+0xc0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d108      	bne.n	8003f2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <TIM_Base_SetConfig+0xb8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d007      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <TIM_Base_SetConfig+0xbc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_Base_SetConfig+0x62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <TIM_Base_SetConfig+0xc0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <TIM_Base_SetConfig+0xb8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800

08003fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0201 	bic.w	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f023 0302 	bic.w	r3, r3, #2
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <TIM_OC1_SetConfig+0xc8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d10c      	bne.n	8004022 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0308 	bic.w	r3, r3, #8
 800400e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <TIM_OC1_SetConfig+0xc8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d111      	bne.n	800404e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40012c00 	.word	0x40012c00

08004078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f023 0210 	bic.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0320 	bic.w	r3, r3, #32
 80040c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1d      	ldr	r2, [pc, #116]	; (8004148 <TIM_OC2_SetConfig+0xd0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10d      	bne.n	80040f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <TIM_OC2_SetConfig+0xd0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d113      	bne.n	8004124 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00

0800414c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	; (800421c <TIM_OC3_SetConfig+0xd0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10d      	bne.n	80041c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <TIM_OC3_SetConfig+0xd0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d113      	bne.n	80041f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40012c00 	.word	0x40012c00

08004220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800426a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	031b      	lsls	r3, r3, #12
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a0f      	ldr	r2, [pc, #60]	; (80042b8 <TIM_OC4_SetConfig+0x98>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d109      	bne.n	8004294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	40012c00 	.word	0x40012c00

080042bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	2201      	movs	r2, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1a      	ldr	r2, [r3, #32]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	43db      	mvns	r3, r3
 80042de:	401a      	ands	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004318:	2302      	movs	r3, #2
 800431a:	e046      	b.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00e      	beq.n	800437e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d009      	beq.n	800437e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d004      	beq.n	800437e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a10      	ldr	r2, [pc, #64]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d10c      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4313      	orrs	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800

080043c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e03f      	b.n	8004452 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fe3c 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fcad 	bl	8004d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b20      	cmp	r3, #32
 8004472:	d11d      	bne.n	80044b0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_UART_Receive_DMA+0x26>
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e016      	b.n	80044b2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_UART_Receive_DMA+0x38>
 800448e:	2302      	movs	r3, #2
 8004490:	e00f      	b.n	80044b2 <HAL_UART_Receive_DMA+0x58>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	461a      	mov	r2, r3
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fa92 	bl	80049d0 <UART_Start_Receive_DMA>
 80044ac:	4603      	mov	r3, r0
 80044ae:	e000      	b.n	80044b2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_UART_IRQHandler+0x52>
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fb82 	bl	8004c10 <UART_Receive_IT>
      return;
 800450c:	e17b      	b.n	8004806 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80b1 	beq.w	8004678 <HAL_UART_IRQHandler+0x1bc>
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_UART_IRQHandler+0x70>
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80a6 	beq.w	8004678 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_UART_IRQHandler+0x90>
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f043 0201 	orr.w	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_UART_IRQHandler+0xb0>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f043 0202 	orr.w	r2, r3, #2
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_UART_IRQHandler+0xd0>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00f      	beq.n	80045b6 <HAL_UART_IRQHandler+0xfa>
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <HAL_UART_IRQHandler+0xee>
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0208 	orr.w	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 811e 	beq.w	80047fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_UART_IRQHandler+0x11e>
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb1b 	bl	8004c10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <HAL_UART_IRQHandler+0x146>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d031      	beq.n	8004666 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa5d 	bl	8004ac2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d023      	beq.n	800465e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004624:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	2b00      	cmp	r3, #0
 800462c:	d013      	beq.n	8004656 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	4a76      	ldr	r2, [pc, #472]	; (800480c <HAL_UART_IRQHandler+0x350>)
 8004634:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe f8c0 	bl	80027c0 <HAL_DMA_Abort_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004650:	4610      	mov	r0, r2
 8004652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004654:	e00e      	b.n	8004674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8f5 	bl	8004846 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	e00a      	b.n	8004674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8f1 	bl	8004846 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e006      	b.n	8004674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f8ed 	bl	8004846 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004672:	e0c3      	b.n	80047fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	bf00      	nop
    return;
 8004676:	e0c1      	b.n	80047fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	2b01      	cmp	r3, #1
 800467e:	f040 80a1 	bne.w	80047c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 809b 	beq.w	80047c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8095 	beq.w	80047c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d04e      	beq.n	800475c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80046c8:	8a3b      	ldrh	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8098 	beq.w	8004800 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046d4:	8a3a      	ldrh	r2, [r7, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	f080 8092 	bcs.w	8004800 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8a3a      	ldrh	r2, [r7, #16]
 80046e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d02b      	beq.n	8004744 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0210 	bic.w	r2, r2, #16
 8004738:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe f803 	bl	800274a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800474c:	b29b      	uxth	r3, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	b29b      	uxth	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f87f 	bl	8004858 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800475a:	e051      	b.n	8004800 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004764:	b29b      	uxth	r3, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d047      	beq.n	8004804 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004774:	8a7b      	ldrh	r3, [r7, #18]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d044      	beq.n	8004804 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004788:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695a      	ldr	r2, [r3, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0210 	bic.w	r2, r2, #16
 80047b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047b8:	8a7b      	ldrh	r3, [r7, #18]
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f84b 	bl	8004858 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047c2:	e01f      	b.n	8004804 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_UART_IRQHandler+0x324>
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f9b2 	bl	8004b42 <UART_Transmit_IT>
    return;
 80047de:	e012      	b.n	8004806 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <HAL_UART_IRQHandler+0x34a>
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f9f3 	bl	8004be0 <UART_EndTransmit_IT>
    return;
 80047fa:	e004      	b.n	8004806 <HAL_UART_IRQHandler+0x34a>
    return;
 80047fc:	bf00      	nop
 80047fe:	e002      	b.n	8004806 <HAL_UART_IRQHandler+0x34a>
      return;
 8004800:	bf00      	nop
 8004802:	e000      	b.n	8004806 <HAL_UART_IRQHandler+0x34a>
      return;
 8004804:	bf00      	nop
  }
}
 8004806:	3728      	adds	r7, #40	; 0x28
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	08004b1b 	.word	0x08004b1b

08004810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr

08004834 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d12a      	bne.n	80048e0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800489e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0210 	bic.w	r2, r2, #16
 80048de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d106      	bne.n	80048f6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ec:	4619      	mov	r1, r3
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff ffb2 	bl	8004858 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048f4:	e002      	b.n	80048fc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff ff93 	bl	8004822 <HAL_UART_RxCpltCallback>
}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	2b01      	cmp	r3, #1
 8004918:	d108      	bne.n	800492c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	b29b      	uxth	r3, r3
 8004922:	4619      	mov	r1, r3
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff ff97 	bl	8004858 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800492a:	e002      	b.n	8004932 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7ff ff81 	bl	8004834 <HAL_UART_RxHalfCpltCallback>
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b21      	cmp	r3, #33	; 0x21
 800496c:	d108      	bne.n	8004980 <UART_DMAError+0x46>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	f000 f88c 	bl	8004a98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf14      	ite	ne
 800498e:	2301      	movne	r3, #1
 8004990:	2300      	moveq	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b22      	cmp	r3, #34	; 0x22
 80049a0:	d108      	bne.n	80049b4 <UART_DMAError+0x7a>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2200      	movs	r2, #0
 80049ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f000 f887 	bl	8004ac2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f043 0210 	orr.w	r2, r3, #16
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f7ff ff40 	bl	8004846 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2222      	movs	r2, #34	; 0x22
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	4a23      	ldr	r2, [pc, #140]	; (8004a8c <UART_Start_Receive_DMA+0xbc>)
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	4a22      	ldr	r2, [pc, #136]	; (8004a90 <UART_Start_Receive_DMA+0xc0>)
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <UART_Start_Receive_DMA+0xc4>)
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a18:	f107 0308 	add.w	r3, r7, #8
 8004a1c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	f7fd fe2c 	bl	800268c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a60:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a80:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	0800486f 	.word	0x0800486f
 8004a90:	08004905 	.word	0x08004905
 8004a94:	0800493b 	.word	0x0800493b

08004a98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004aae:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr

08004ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ad8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0210 	bic.w	r2, r2, #16
 8004b00:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff fe86 	bl	8004846 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b21      	cmp	r3, #33	; 0x21
 8004b54:	d13e      	bne.n	8004bd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5e:	d114      	bne.n	8004b8a <UART_Transmit_IT+0x48>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d110      	bne.n	8004b8a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	621a      	str	r2, [r3, #32]
 8004b88:	e008      	b.n	8004b9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	1c59      	adds	r1, r3, #1
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6211      	str	r1, [r2, #32]
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10f      	bne.n	8004bd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fe05 	bl	8004810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b22      	cmp	r3, #34	; 0x22
 8004c22:	f040 8099 	bne.w	8004d58 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	d117      	bne.n	8004c60 <UART_Receive_IT+0x50>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d113      	bne.n	8004c60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c5e:	e026      	b.n	8004cae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	d007      	beq.n	8004c84 <UART_Receive_IT+0x74>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <UART_Receive_IT+0x82>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	e008      	b.n	8004ca4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d148      	bne.n	8004d54 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0220 	bic.w	r2, r2, #32
 8004cd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ce0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d123      	bne.n	8004d4a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0210 	bic.w	r2, r2, #16
 8004d16:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d10a      	bne.n	8004d3c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fd88 	bl	8004858 <HAL_UARTEx_RxEventCallback>
 8004d48:	e002      	b.n	8004d50 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff fd69 	bl	8004822 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e002      	b.n	8004d5a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e000      	b.n	8004d5a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004d58:	2302      	movs	r3, #2
  }
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d9e:	f023 030c 	bic.w	r3, r3, #12
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <UART_SetConfig+0x114>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d103      	bne.n	8004dd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004dcc:	f7fe fc10 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	e002      	b.n	8004dda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fe fbf8 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009a      	lsls	r2, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <UART_SetConfig+0x118>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	0119      	lsls	r1, r3, #4
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <UART_SetConfig+0x118>)
 8004e12:	fba3 0302 	umull	r0, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2064      	movs	r0, #100	; 0x64
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	3332      	adds	r3, #50	; 0x32
 8004e24:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <UART_SetConfig+0x118>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e30:	4419      	add	r1, r3
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <UART_SetConfig+0x118>)
 8004e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2064      	movs	r0, #100	; 0x64
 8004e52:	fb00 f303 	mul.w	r3, r0, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <UART_SetConfig+0x118>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40013800 	.word	0x40013800
 8004e7c:	51eb851f 	.word	0x51eb851f

08004e80 <__libc_init_array>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	2600      	movs	r6, #0
 8004e84:	4d0c      	ldr	r5, [pc, #48]	; (8004eb8 <__libc_init_array+0x38>)
 8004e86:	4c0d      	ldr	r4, [pc, #52]	; (8004ebc <__libc_init_array+0x3c>)
 8004e88:	1b64      	subs	r4, r4, r5
 8004e8a:	10a4      	asrs	r4, r4, #2
 8004e8c:	42a6      	cmp	r6, r4
 8004e8e:	d109      	bne.n	8004ea4 <__libc_init_array+0x24>
 8004e90:	f001 f888 	bl	8005fa4 <_init>
 8004e94:	2600      	movs	r6, #0
 8004e96:	4d0a      	ldr	r5, [pc, #40]	; (8004ec0 <__libc_init_array+0x40>)
 8004e98:	4c0a      	ldr	r4, [pc, #40]	; (8004ec4 <__libc_init_array+0x44>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	42a6      	cmp	r6, r4
 8004ea0:	d105      	bne.n	8004eae <__libc_init_array+0x2e>
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea8:	4798      	blx	r3
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7ee      	b.n	8004e8c <__libc_init_array+0xc>
 8004eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb2:	4798      	blx	r3
 8004eb4:	3601      	adds	r6, #1
 8004eb6:	e7f2      	b.n	8004e9e <__libc_init_array+0x1e>
 8004eb8:	080061c0 	.word	0x080061c0
 8004ebc:	080061c0 	.word	0x080061c0
 8004ec0:	080061c0 	.word	0x080061c0
 8004ec4:	080061c4 	.word	0x080061c4

08004ec8 <memset>:
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4402      	add	r2, r0
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d100      	bne.n	8004ed2 <memset+0xa>
 8004ed0:	4770      	bx	lr
 8004ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed6:	e7f9      	b.n	8004ecc <memset+0x4>

08004ed8 <tan>:
 8004ed8:	b530      	push	{r4, r5, lr}
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <tan+0x4c>)
 8004edc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	dc06      	bgt.n	8004ef4 <tan+0x1c>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	2200      	movs	r2, #0
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2300      	movs	r3, #0
 8004eee:	f000 fd5b 	bl	80059a8 <__kernel_tan>
 8004ef2:	e006      	b.n	8004f02 <tan+0x2a>
 8004ef4:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <tan+0x50>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	dd05      	ble.n	8004f06 <tan+0x2e>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	f7fb f9df 	bl	80002c0 <__aeabi_dsub>
 8004f02:	b007      	add	sp, #28
 8004f04:	bd30      	pop	{r4, r5, pc}
 8004f06:	aa02      	add	r2, sp, #8
 8004f08:	f000 f812 	bl	8004f30 <__ieee754_rem_pio2>
 8004f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f10:	0040      	lsls	r0, r0, #1
 8004f12:	f000 0002 	and.w	r0, r0, #2
 8004f16:	f1c0 0001 	rsb	r0, r0, #1
 8004f1a:	9000      	str	r0, [sp, #0]
 8004f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f20:	e7e5      	b.n	8004eee <tan+0x16>
 8004f22:	bf00      	nop
 8004f24:	3fe921fb 	.word	0x3fe921fb
 8004f28:	7fefffff 	.word	0x7fefffff
 8004f2c:	00000000 	.word	0x00000000

08004f30 <__ieee754_rem_pio2>:
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	4614      	mov	r4, r2
 8004f36:	4ac4      	ldr	r2, [pc, #784]	; (8005248 <__ieee754_rem_pio2+0x318>)
 8004f38:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004f3c:	b08d      	sub	sp, #52	; 0x34
 8004f3e:	4592      	cmp	sl, r2
 8004f40:	9104      	str	r1, [sp, #16]
 8004f42:	dc07      	bgt.n	8004f54 <__ieee754_rem_pio2+0x24>
 8004f44:	2200      	movs	r2, #0
 8004f46:	2300      	movs	r3, #0
 8004f48:	e9c4 0100 	strd	r0, r1, [r4]
 8004f4c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004f50:	2500      	movs	r5, #0
 8004f52:	e024      	b.n	8004f9e <__ieee754_rem_pio2+0x6e>
 8004f54:	4abd      	ldr	r2, [pc, #756]	; (800524c <__ieee754_rem_pio2+0x31c>)
 8004f56:	4592      	cmp	sl, r2
 8004f58:	dc72      	bgt.n	8005040 <__ieee754_rem_pio2+0x110>
 8004f5a:	9b04      	ldr	r3, [sp, #16]
 8004f5c:	4dbc      	ldr	r5, [pc, #752]	; (8005250 <__ieee754_rem_pio2+0x320>)
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	a3ab      	add	r3, pc, #684	; (adr r3, 8005210 <__ieee754_rem_pio2+0x2e0>)
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	dd36      	ble.n	8004fd6 <__ieee754_rem_pio2+0xa6>
 8004f68:	f7fb f9aa 	bl	80002c0 <__aeabi_dsub>
 8004f6c:	45aa      	cmp	sl, r5
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460f      	mov	r7, r1
 8004f72:	d018      	beq.n	8004fa6 <__ieee754_rem_pio2+0x76>
 8004f74:	a3a8      	add	r3, pc, #672	; (adr r3, 8005218 <__ieee754_rem_pio2+0x2e8>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f7fb f9a1 	bl	80002c0 <__aeabi_dsub>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4630      	mov	r0, r6
 8004f84:	e9c4 2300 	strd	r2, r3, [r4]
 8004f88:	4639      	mov	r1, r7
 8004f8a:	f7fb f999 	bl	80002c0 <__aeabi_dsub>
 8004f8e:	a3a2      	add	r3, pc, #648	; (adr r3, 8005218 <__ieee754_rem_pio2+0x2e8>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f7fb f994 	bl	80002c0 <__aeabi_dsub>
 8004f98:	2501      	movs	r5, #1
 8004f9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	b00d      	add	sp, #52	; 0x34
 8004fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa6:	a39e      	add	r3, pc, #632	; (adr r3, 8005220 <__ieee754_rem_pio2+0x2f0>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb f988 	bl	80002c0 <__aeabi_dsub>
 8004fb0:	a39d      	add	r3, pc, #628	; (adr r3, 8005228 <__ieee754_rem_pio2+0x2f8>)
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460f      	mov	r7, r1
 8004fba:	f7fb f981 	bl	80002c0 <__aeabi_dsub>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	e9c4 2300 	strd	r2, r3, [r4]
 8004fc8:	4639      	mov	r1, r7
 8004fca:	f7fb f979 	bl	80002c0 <__aeabi_dsub>
 8004fce:	a396      	add	r3, pc, #600	; (adr r3, 8005228 <__ieee754_rem_pio2+0x2f8>)
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	e7de      	b.n	8004f94 <__ieee754_rem_pio2+0x64>
 8004fd6:	f7fb f975 	bl	80002c4 <__adddf3>
 8004fda:	45aa      	cmp	sl, r5
 8004fdc:	4606      	mov	r6, r0
 8004fde:	460f      	mov	r7, r1
 8004fe0:	d016      	beq.n	8005010 <__ieee754_rem_pio2+0xe0>
 8004fe2:	a38d      	add	r3, pc, #564	; (adr r3, 8005218 <__ieee754_rem_pio2+0x2e8>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f7fb f96c 	bl	80002c4 <__adddf3>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	e9c4 2300 	strd	r2, r3, [r4]
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	f7fb f962 	bl	80002c0 <__aeabi_dsub>
 8004ffc:	a386      	add	r3, pc, #536	; (adr r3, 8005218 <__ieee754_rem_pio2+0x2e8>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb f95f 	bl	80002c4 <__adddf3>
 8005006:	f04f 35ff 	mov.w	r5, #4294967295
 800500a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800500e:	e7c6      	b.n	8004f9e <__ieee754_rem_pio2+0x6e>
 8005010:	a383      	add	r3, pc, #524	; (adr r3, 8005220 <__ieee754_rem_pio2+0x2f0>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb f955 	bl	80002c4 <__adddf3>
 800501a:	a383      	add	r3, pc, #524	; (adr r3, 8005228 <__ieee754_rem_pio2+0x2f8>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	f7fb f94e 	bl	80002c4 <__adddf3>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4630      	mov	r0, r6
 800502e:	e9c4 2300 	strd	r2, r3, [r4]
 8005032:	4639      	mov	r1, r7
 8005034:	f7fb f944 	bl	80002c0 <__aeabi_dsub>
 8005038:	a37b      	add	r3, pc, #492	; (adr r3, 8005228 <__ieee754_rem_pio2+0x2f8>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	e7e0      	b.n	8005002 <__ieee754_rem_pio2+0xd2>
 8005040:	4a84      	ldr	r2, [pc, #528]	; (8005254 <__ieee754_rem_pio2+0x324>)
 8005042:	4592      	cmp	sl, r2
 8005044:	f300 80d5 	bgt.w	80051f2 <__ieee754_rem_pio2+0x2c2>
 8005048:	f000 feaa 	bl	8005da0 <fabs>
 800504c:	a378      	add	r3, pc, #480	; (adr r3, 8005230 <__ieee754_rem_pio2+0x300>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	4606      	mov	r6, r0
 8005054:	460f      	mov	r7, r1
 8005056:	f7fb faeb 	bl	8000630 <__aeabi_dmul>
 800505a:	2200      	movs	r2, #0
 800505c:	4b7e      	ldr	r3, [pc, #504]	; (8005258 <__ieee754_rem_pio2+0x328>)
 800505e:	f7fb f931 	bl	80002c4 <__adddf3>
 8005062:	f7fb fd7f 	bl	8000b64 <__aeabi_d2iz>
 8005066:	4605      	mov	r5, r0
 8005068:	f7fb fa78 	bl	800055c <__aeabi_i2d>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005074:	a366      	add	r3, pc, #408	; (adr r3, 8005210 <__ieee754_rem_pio2+0x2e0>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb fad9 	bl	8000630 <__aeabi_dmul>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4630      	mov	r0, r6
 8005084:	4639      	mov	r1, r7
 8005086:	f7fb f91b 	bl	80002c0 <__aeabi_dsub>
 800508a:	a363      	add	r3, pc, #396	; (adr r3, 8005218 <__ieee754_rem_pio2+0x2e8>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	4680      	mov	r8, r0
 8005092:	4689      	mov	r9, r1
 8005094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005098:	f7fb faca 	bl	8000630 <__aeabi_dmul>
 800509c:	2d1f      	cmp	r5, #31
 800509e:	4606      	mov	r6, r0
 80050a0:	460f      	mov	r7, r1
 80050a2:	dc0e      	bgt.n	80050c2 <__ieee754_rem_pio2+0x192>
 80050a4:	4b6d      	ldr	r3, [pc, #436]	; (800525c <__ieee754_rem_pio2+0x32c>)
 80050a6:	1e6a      	subs	r2, r5, #1
 80050a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ac:	4553      	cmp	r3, sl
 80050ae:	d008      	beq.n	80050c2 <__ieee754_rem_pio2+0x192>
 80050b0:	4632      	mov	r2, r6
 80050b2:	463b      	mov	r3, r7
 80050b4:	4640      	mov	r0, r8
 80050b6:	4649      	mov	r1, r9
 80050b8:	f7fb f902 	bl	80002c0 <__aeabi_dsub>
 80050bc:	e9c4 0100 	strd	r0, r1, [r4]
 80050c0:	e013      	b.n	80050ea <__ieee754_rem_pio2+0x1ba>
 80050c2:	463b      	mov	r3, r7
 80050c4:	4632      	mov	r2, r6
 80050c6:	4640      	mov	r0, r8
 80050c8:	4649      	mov	r1, r9
 80050ca:	f7fb f8f9 	bl	80002c0 <__aeabi_dsub>
 80050ce:	ea4f 532a 	mov.w	r3, sl, asr #20
 80050d2:	9305      	str	r3, [sp, #20]
 80050d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80050d8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80050dc:	f1ba 0f10 	cmp.w	sl, #16
 80050e0:	dc1f      	bgt.n	8005122 <__ieee754_rem_pio2+0x1f2>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	e9c4 2300 	strd	r2, r3, [r4]
 80050ea:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80050ee:	4640      	mov	r0, r8
 80050f0:	4653      	mov	r3, sl
 80050f2:	4649      	mov	r1, r9
 80050f4:	f7fb f8e4 	bl	80002c0 <__aeabi_dsub>
 80050f8:	4632      	mov	r2, r6
 80050fa:	463b      	mov	r3, r7
 80050fc:	f7fb f8e0 	bl	80002c0 <__aeabi_dsub>
 8005100:	460b      	mov	r3, r1
 8005102:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005106:	9904      	ldr	r1, [sp, #16]
 8005108:	4602      	mov	r2, r0
 800510a:	2900      	cmp	r1, #0
 800510c:	f6bf af47 	bge.w	8004f9e <__ieee754_rem_pio2+0x6e>
 8005110:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8005114:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005118:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800511c:	60e3      	str	r3, [r4, #12]
 800511e:	426d      	negs	r5, r5
 8005120:	e73d      	b.n	8004f9e <__ieee754_rem_pio2+0x6e>
 8005122:	a33f      	add	r3, pc, #252	; (adr r3, 8005220 <__ieee754_rem_pio2+0x2f0>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800512c:	f7fb fa80 	bl	8000630 <__aeabi_dmul>
 8005130:	4606      	mov	r6, r0
 8005132:	460f      	mov	r7, r1
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	f7fb f8c0 	bl	80002c0 <__aeabi_dsub>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4682      	mov	sl, r0
 8005146:	468b      	mov	fp, r1
 8005148:	4640      	mov	r0, r8
 800514a:	4649      	mov	r1, r9
 800514c:	f7fb f8b8 	bl	80002c0 <__aeabi_dsub>
 8005150:	4632      	mov	r2, r6
 8005152:	463b      	mov	r3, r7
 8005154:	f7fb f8b4 	bl	80002c0 <__aeabi_dsub>
 8005158:	a333      	add	r3, pc, #204	; (adr r3, 8005228 <__ieee754_rem_pio2+0x2f8>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	4606      	mov	r6, r0
 8005160:	460f      	mov	r7, r1
 8005162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005166:	f7fb fa63 	bl	8000630 <__aeabi_dmul>
 800516a:	4632      	mov	r2, r6
 800516c:	463b      	mov	r3, r7
 800516e:	f7fb f8a7 	bl	80002c0 <__aeabi_dsub>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4606      	mov	r6, r0
 8005178:	460f      	mov	r7, r1
 800517a:	4650      	mov	r0, sl
 800517c:	4659      	mov	r1, fp
 800517e:	f7fb f89f 	bl	80002c0 <__aeabi_dsub>
 8005182:	9a05      	ldr	r2, [sp, #20]
 8005184:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b31      	cmp	r3, #49	; 0x31
 800518c:	dc06      	bgt.n	800519c <__ieee754_rem_pio2+0x26c>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	46d0      	mov	r8, sl
 8005194:	46d9      	mov	r9, fp
 8005196:	e9c4 2300 	strd	r2, r3, [r4]
 800519a:	e7a6      	b.n	80050ea <__ieee754_rem_pio2+0x1ba>
 800519c:	a326      	add	r3, pc, #152	; (adr r3, 8005238 <__ieee754_rem_pio2+0x308>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a6:	f7fb fa43 	bl	8000630 <__aeabi_dmul>
 80051aa:	4606      	mov	r6, r0
 80051ac:	460f      	mov	r7, r1
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4650      	mov	r0, sl
 80051b4:	4659      	mov	r1, fp
 80051b6:	f7fb f883 	bl	80002c0 <__aeabi_dsub>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4680      	mov	r8, r0
 80051c0:	4689      	mov	r9, r1
 80051c2:	4650      	mov	r0, sl
 80051c4:	4659      	mov	r1, fp
 80051c6:	f7fb f87b 	bl	80002c0 <__aeabi_dsub>
 80051ca:	4632      	mov	r2, r6
 80051cc:	463b      	mov	r3, r7
 80051ce:	f7fb f877 	bl	80002c0 <__aeabi_dsub>
 80051d2:	a31b      	add	r3, pc, #108	; (adr r3, 8005240 <__ieee754_rem_pio2+0x310>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	4606      	mov	r6, r0
 80051da:	460f      	mov	r7, r1
 80051dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e0:	f7fb fa26 	bl	8000630 <__aeabi_dmul>
 80051e4:	4632      	mov	r2, r6
 80051e6:	463b      	mov	r3, r7
 80051e8:	f7fb f86a 	bl	80002c0 <__aeabi_dsub>
 80051ec:	4606      	mov	r6, r0
 80051ee:	460f      	mov	r7, r1
 80051f0:	e75e      	b.n	80050b0 <__ieee754_rem_pio2+0x180>
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <__ieee754_rem_pio2+0x330>)
 80051f4:	4592      	cmp	sl, r2
 80051f6:	dd35      	ble.n	8005264 <__ieee754_rem_pio2+0x334>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	f7fb f860 	bl	80002c0 <__aeabi_dsub>
 8005200:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005204:	e9c4 0100 	strd	r0, r1, [r4]
 8005208:	e6a2      	b.n	8004f50 <__ieee754_rem_pio2+0x20>
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w
 8005210:	54400000 	.word	0x54400000
 8005214:	3ff921fb 	.word	0x3ff921fb
 8005218:	1a626331 	.word	0x1a626331
 800521c:	3dd0b461 	.word	0x3dd0b461
 8005220:	1a600000 	.word	0x1a600000
 8005224:	3dd0b461 	.word	0x3dd0b461
 8005228:	2e037073 	.word	0x2e037073
 800522c:	3ba3198a 	.word	0x3ba3198a
 8005230:	6dc9c883 	.word	0x6dc9c883
 8005234:	3fe45f30 	.word	0x3fe45f30
 8005238:	2e000000 	.word	0x2e000000
 800523c:	3ba3198a 	.word	0x3ba3198a
 8005240:	252049c1 	.word	0x252049c1
 8005244:	397b839a 	.word	0x397b839a
 8005248:	3fe921fb 	.word	0x3fe921fb
 800524c:	4002d97b 	.word	0x4002d97b
 8005250:	3ff921fb 	.word	0x3ff921fb
 8005254:	413921fb 	.word	0x413921fb
 8005258:	3fe00000 	.word	0x3fe00000
 800525c:	08005fe8 	.word	0x08005fe8
 8005260:	7fefffff 	.word	0x7fefffff
 8005264:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005268:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800526c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005270:	460f      	mov	r7, r1
 8005272:	4606      	mov	r6, r0
 8005274:	f7fb fc76 	bl	8000b64 <__aeabi_d2iz>
 8005278:	f7fb f970 	bl	800055c <__aeabi_i2d>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4630      	mov	r0, r6
 8005282:	4639      	mov	r1, r7
 8005284:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005288:	f7fb f81a 	bl	80002c0 <__aeabi_dsub>
 800528c:	2200      	movs	r2, #0
 800528e:	4b22      	ldr	r3, [pc, #136]	; (8005318 <__ieee754_rem_pio2+0x3e8>)
 8005290:	f7fb f9ce 	bl	8000630 <__aeabi_dmul>
 8005294:	460f      	mov	r7, r1
 8005296:	4606      	mov	r6, r0
 8005298:	f7fb fc64 	bl	8000b64 <__aeabi_d2iz>
 800529c:	f7fb f95e 	bl	800055c <__aeabi_i2d>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4630      	mov	r0, r6
 80052a6:	4639      	mov	r1, r7
 80052a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052ac:	f7fb f808 	bl	80002c0 <__aeabi_dsub>
 80052b0:	2200      	movs	r2, #0
 80052b2:	4b19      	ldr	r3, [pc, #100]	; (8005318 <__ieee754_rem_pio2+0x3e8>)
 80052b4:	f7fb f9bc 	bl	8000630 <__aeabi_dmul>
 80052b8:	f04f 0803 	mov.w	r8, #3
 80052bc:	2600      	movs	r6, #0
 80052be:	2700      	movs	r7, #0
 80052c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052c4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80052c8:	4632      	mov	r2, r6
 80052ca:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80052ce:	463b      	mov	r3, r7
 80052d0:	46c2      	mov	sl, r8
 80052d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80052d6:	f7fb fc13 	bl	8000b00 <__aeabi_dcmpeq>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d1f4      	bne.n	80052c8 <__ieee754_rem_pio2+0x398>
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <__ieee754_rem_pio2+0x3ec>)
 80052e0:	462a      	mov	r2, r5
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	2302      	movs	r3, #2
 80052e6:	4621      	mov	r1, r4
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	a806      	add	r0, sp, #24
 80052ec:	4653      	mov	r3, sl
 80052ee:	f000 f817 	bl	8005320 <__kernel_rem_pio2>
 80052f2:	9b04      	ldr	r3, [sp, #16]
 80052f4:	4605      	mov	r5, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f6bf ae51 	bge.w	8004f9e <__ieee754_rem_pio2+0x6e>
 80052fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005304:	e9c4 2300 	strd	r2, r3, [r4]
 8005308:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800530c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005310:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005314:	e703      	b.n	800511e <__ieee754_rem_pio2+0x1ee>
 8005316:	bf00      	nop
 8005318:	41700000 	.word	0x41700000
 800531c:	08006068 	.word	0x08006068

08005320 <__kernel_rem_pio2>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005328:	9308      	str	r3, [sp, #32]
 800532a:	9106      	str	r1, [sp, #24]
 800532c:	4bb6      	ldr	r3, [pc, #728]	; (8005608 <__kernel_rem_pio2+0x2e8>)
 800532e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005330:	f112 0f14 	cmn.w	r2, #20
 8005334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005338:	bfa8      	it	ge
 800533a:	1ed4      	subge	r4, r2, #3
 800533c:	9302      	str	r3, [sp, #8]
 800533e:	9b08      	ldr	r3, [sp, #32]
 8005340:	bfb8      	it	lt
 8005342:	2400      	movlt	r4, #0
 8005344:	f103 33ff 	add.w	r3, r3, #4294967295
 8005348:	9307      	str	r3, [sp, #28]
 800534a:	bfa4      	itt	ge
 800534c:	2318      	movge	r3, #24
 800534e:	fb94 f4f3 	sdivge	r4, r4, r3
 8005352:	f06f 0317 	mvn.w	r3, #23
 8005356:	fb04 3303 	mla	r3, r4, r3, r3
 800535a:	eb03 0b02 	add.w	fp, r3, r2
 800535e:	9a07      	ldr	r2, [sp, #28]
 8005360:	9b02      	ldr	r3, [sp, #8]
 8005362:	1aa7      	subs	r7, r4, r2
 8005364:	eb03 0802 	add.w	r8, r3, r2
 8005368:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800536a:	2500      	movs	r5, #0
 800536c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	9009      	str	r0, [sp, #36]	; 0x24
 8005376:	ae20      	add	r6, sp, #128	; 0x80
 8005378:	4545      	cmp	r5, r8
 800537a:	dd14      	ble.n	80053a6 <__kernel_rem_pio2+0x86>
 800537c:	f04f 0800 	mov.w	r8, #0
 8005380:	9a08      	ldr	r2, [sp, #32]
 8005382:	ab20      	add	r3, sp, #128	; 0x80
 8005384:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8005388:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800538c:	9b02      	ldr	r3, [sp, #8]
 800538e:	4598      	cmp	r8, r3
 8005390:	dc35      	bgt.n	80053fe <__kernel_rem_pio2+0xde>
 8005392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005394:	2200      	movs	r2, #0
 8005396:	f1a3 0908 	sub.w	r9, r3, #8
 800539a:	2300      	movs	r3, #0
 800539c:	462f      	mov	r7, r5
 800539e:	2600      	movs	r6, #0
 80053a0:	e9cd 2300 	strd	r2, r3, [sp]
 80053a4:	e01f      	b.n	80053e6 <__kernel_rem_pio2+0xc6>
 80053a6:	42ef      	cmn	r7, r5
 80053a8:	d40b      	bmi.n	80053c2 <__kernel_rem_pio2+0xa2>
 80053aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80053ae:	e9cd 2300 	strd	r2, r3, [sp]
 80053b2:	f7fb f8d3 	bl	800055c <__aeabi_i2d>
 80053b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80053be:	3501      	adds	r5, #1
 80053c0:	e7da      	b.n	8005378 <__kernel_rem_pio2+0x58>
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	e7f8      	b.n	80053ba <__kernel_rem_pio2+0x9a>
 80053c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053cc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80053d0:	f7fb f92e 	bl	8000630 <__aeabi_dmul>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053dc:	f7fa ff72 	bl	80002c4 <__adddf3>
 80053e0:	e9cd 0100 	strd	r0, r1, [sp]
 80053e4:	3601      	adds	r6, #1
 80053e6:	9b07      	ldr	r3, [sp, #28]
 80053e8:	3f08      	subs	r7, #8
 80053ea:	429e      	cmp	r6, r3
 80053ec:	ddec      	ble.n	80053c8 <__kernel_rem_pio2+0xa8>
 80053ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053f2:	f108 0801 	add.w	r8, r8, #1
 80053f6:	e8ea 2302 	strd	r2, r3, [sl], #8
 80053fa:	3508      	adds	r5, #8
 80053fc:	e7c6      	b.n	800538c <__kernel_rem_pio2+0x6c>
 80053fe:	9b02      	ldr	r3, [sp, #8]
 8005400:	aa0c      	add	r2, sp, #48	; 0x30
 8005402:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005406:	930b      	str	r3, [sp, #44]	; 0x2c
 8005408:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800540a:	9e02      	ldr	r6, [sp, #8]
 800540c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005410:	930a      	str	r3, [sp, #40]	; 0x28
 8005412:	ab98      	add	r3, sp, #608	; 0x260
 8005414:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005418:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800541c:	ab70      	add	r3, sp, #448	; 0x1c0
 800541e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8005422:	46d0      	mov	r8, sl
 8005424:	46b1      	mov	r9, r6
 8005426:	af0c      	add	r7, sp, #48	; 0x30
 8005428:	9700      	str	r7, [sp, #0]
 800542a:	f1b9 0f00 	cmp.w	r9, #0
 800542e:	f1a8 0808 	sub.w	r8, r8, #8
 8005432:	dc71      	bgt.n	8005518 <__kernel_rem_pio2+0x1f8>
 8005434:	465a      	mov	r2, fp
 8005436:	4620      	mov	r0, r4
 8005438:	4629      	mov	r1, r5
 800543a:	f000 fd35 	bl	8005ea8 <scalbn>
 800543e:	2200      	movs	r2, #0
 8005440:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005444:	4604      	mov	r4, r0
 8005446:	460d      	mov	r5, r1
 8005448:	f7fb f8f2 	bl	8000630 <__aeabi_dmul>
 800544c:	f000 fcac 	bl	8005da8 <floor>
 8005450:	2200      	movs	r2, #0
 8005452:	4b6e      	ldr	r3, [pc, #440]	; (800560c <__kernel_rem_pio2+0x2ec>)
 8005454:	f7fb f8ec 	bl	8000630 <__aeabi_dmul>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	f7fa ff2e 	bl	80002c0 <__aeabi_dsub>
 8005464:	460d      	mov	r5, r1
 8005466:	4604      	mov	r4, r0
 8005468:	f7fb fb7c 	bl	8000b64 <__aeabi_d2iz>
 800546c:	9004      	str	r0, [sp, #16]
 800546e:	f7fb f875 	bl	800055c <__aeabi_i2d>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4620      	mov	r0, r4
 8005478:	4629      	mov	r1, r5
 800547a:	f7fa ff21 	bl	80002c0 <__aeabi_dsub>
 800547e:	f1bb 0f00 	cmp.w	fp, #0
 8005482:	4680      	mov	r8, r0
 8005484:	4689      	mov	r9, r1
 8005486:	dd70      	ble.n	800556a <__kernel_rem_pio2+0x24a>
 8005488:	1e72      	subs	r2, r6, #1
 800548a:	ab0c      	add	r3, sp, #48	; 0x30
 800548c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005490:	9c04      	ldr	r4, [sp, #16]
 8005492:	f1cb 0118 	rsb	r1, fp, #24
 8005496:	fa40 f301 	asr.w	r3, r0, r1
 800549a:	441c      	add	r4, r3
 800549c:	408b      	lsls	r3, r1
 800549e:	1ac0      	subs	r0, r0, r3
 80054a0:	ab0c      	add	r3, sp, #48	; 0x30
 80054a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80054a6:	f1cb 0317 	rsb	r3, fp, #23
 80054aa:	9404      	str	r4, [sp, #16]
 80054ac:	fa40 f303 	asr.w	r3, r0, r3
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	9b00      	ldr	r3, [sp, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	dd66      	ble.n	8005586 <__kernel_rem_pio2+0x266>
 80054b8:	2200      	movs	r2, #0
 80054ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80054be:	4614      	mov	r4, r2
 80054c0:	9b04      	ldr	r3, [sp, #16]
 80054c2:	3301      	adds	r3, #1
 80054c4:	9304      	str	r3, [sp, #16]
 80054c6:	4296      	cmp	r6, r2
 80054c8:	f300 80ac 	bgt.w	8005624 <__kernel_rem_pio2+0x304>
 80054cc:	f1bb 0f00 	cmp.w	fp, #0
 80054d0:	dd07      	ble.n	80054e2 <__kernel_rem_pio2+0x1c2>
 80054d2:	f1bb 0f01 	cmp.w	fp, #1
 80054d6:	f000 80b4 	beq.w	8005642 <__kernel_rem_pio2+0x322>
 80054da:	f1bb 0f02 	cmp.w	fp, #2
 80054de:	f000 80ba 	beq.w	8005656 <__kernel_rem_pio2+0x336>
 80054e2:	9b00      	ldr	r3, [sp, #0]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d14e      	bne.n	8005586 <__kernel_rem_pio2+0x266>
 80054e8:	4642      	mov	r2, r8
 80054ea:	464b      	mov	r3, r9
 80054ec:	2000      	movs	r0, #0
 80054ee:	4948      	ldr	r1, [pc, #288]	; (8005610 <__kernel_rem_pio2+0x2f0>)
 80054f0:	f7fa fee6 	bl	80002c0 <__aeabi_dsub>
 80054f4:	4680      	mov	r8, r0
 80054f6:	4689      	mov	r9, r1
 80054f8:	2c00      	cmp	r4, #0
 80054fa:	d044      	beq.n	8005586 <__kernel_rem_pio2+0x266>
 80054fc:	465a      	mov	r2, fp
 80054fe:	2000      	movs	r0, #0
 8005500:	4943      	ldr	r1, [pc, #268]	; (8005610 <__kernel_rem_pio2+0x2f0>)
 8005502:	f000 fcd1 	bl	8005ea8 <scalbn>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4640      	mov	r0, r8
 800550c:	4649      	mov	r1, r9
 800550e:	f7fa fed7 	bl	80002c0 <__aeabi_dsub>
 8005512:	4680      	mov	r8, r0
 8005514:	4689      	mov	r9, r1
 8005516:	e036      	b.n	8005586 <__kernel_rem_pio2+0x266>
 8005518:	2200      	movs	r2, #0
 800551a:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <__kernel_rem_pio2+0x2f4>)
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fb f886 	bl	8000630 <__aeabi_dmul>
 8005524:	f7fb fb1e 	bl	8000b64 <__aeabi_d2iz>
 8005528:	f7fb f818 	bl	800055c <__aeabi_i2d>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005534:	2200      	movs	r2, #0
 8005536:	4b38      	ldr	r3, [pc, #224]	; (8005618 <__kernel_rem_pio2+0x2f8>)
 8005538:	f7fb f87a 	bl	8000630 <__aeabi_dmul>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4620      	mov	r0, r4
 8005542:	4629      	mov	r1, r5
 8005544:	f7fa febc 	bl	80002c0 <__aeabi_dsub>
 8005548:	f7fb fb0c 	bl	8000b64 <__aeabi_d2iz>
 800554c:	9b00      	ldr	r3, [sp, #0]
 800554e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005552:	f843 0b04 	str.w	r0, [r3], #4
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800555c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005560:	f7fa feb0 	bl	80002c4 <__adddf3>
 8005564:	4604      	mov	r4, r0
 8005566:	460d      	mov	r5, r1
 8005568:	e75f      	b.n	800542a <__kernel_rem_pio2+0x10a>
 800556a:	d105      	bne.n	8005578 <__kernel_rem_pio2+0x258>
 800556c:	1e73      	subs	r3, r6, #1
 800556e:	aa0c      	add	r2, sp, #48	; 0x30
 8005570:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005574:	15c3      	asrs	r3, r0, #23
 8005576:	e79b      	b.n	80054b0 <__kernel_rem_pio2+0x190>
 8005578:	2200      	movs	r2, #0
 800557a:	4b28      	ldr	r3, [pc, #160]	; (800561c <__kernel_rem_pio2+0x2fc>)
 800557c:	f7fb fade 	bl	8000b3c <__aeabi_dcmpge>
 8005580:	2800      	cmp	r0, #0
 8005582:	d13e      	bne.n	8005602 <__kernel_rem_pio2+0x2e2>
 8005584:	9000      	str	r0, [sp, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	2300      	movs	r3, #0
 800558a:	4640      	mov	r0, r8
 800558c:	4649      	mov	r1, r9
 800558e:	f7fb fab7 	bl	8000b00 <__aeabi_dcmpeq>
 8005592:	2800      	cmp	r0, #0
 8005594:	f000 80b1 	beq.w	80056fa <__kernel_rem_pio2+0x3da>
 8005598:	1e74      	subs	r4, r6, #1
 800559a:	4623      	mov	r3, r4
 800559c:	2200      	movs	r2, #0
 800559e:	9902      	ldr	r1, [sp, #8]
 80055a0:	428b      	cmp	r3, r1
 80055a2:	da5f      	bge.n	8005664 <__kernel_rem_pio2+0x344>
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	d074      	beq.n	8005692 <__kernel_rem_pio2+0x372>
 80055a8:	ab0c      	add	r3, sp, #48	; 0x30
 80055aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80055ae:	f1ab 0b18 	sub.w	fp, fp, #24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 809f 	beq.w	80056f6 <__kernel_rem_pio2+0x3d6>
 80055b8:	465a      	mov	r2, fp
 80055ba:	2000      	movs	r0, #0
 80055bc:	4914      	ldr	r1, [pc, #80]	; (8005610 <__kernel_rem_pio2+0x2f0>)
 80055be:	f000 fc73 	bl	8005ea8 <scalbn>
 80055c2:	46a2      	mov	sl, r4
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	f04f 0800 	mov.w	r8, #0
 80055cc:	ab70      	add	r3, sp, #448	; 0x1c0
 80055ce:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8005614 <__kernel_rem_pio2+0x2f4>
 80055d2:	00e5      	lsls	r5, r4, #3
 80055d4:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80055d8:	f1ba 0f00 	cmp.w	sl, #0
 80055dc:	f280 80c3 	bge.w	8005766 <__kernel_rem_pio2+0x446>
 80055e0:	4626      	mov	r6, r4
 80055e2:	2e00      	cmp	r6, #0
 80055e4:	f2c0 80f5 	blt.w	80057d2 <__kernel_rem_pio2+0x4b2>
 80055e8:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <__kernel_rem_pio2+0x300>)
 80055ea:	f04f 0a00 	mov.w	sl, #0
 80055ee:	9307      	str	r3, [sp, #28]
 80055f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80055f2:	f04f 0b00 	mov.w	fp, #0
 80055f6:	f04f 0800 	mov.w	r8, #0
 80055fa:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80055fe:	1ba7      	subs	r7, r4, r6
 8005600:	e0db      	b.n	80057ba <__kernel_rem_pio2+0x49a>
 8005602:	2302      	movs	r3, #2
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	e757      	b.n	80054b8 <__kernel_rem_pio2+0x198>
 8005608:	080061b0 	.word	0x080061b0
 800560c:	40200000 	.word	0x40200000
 8005610:	3ff00000 	.word	0x3ff00000
 8005614:	3e700000 	.word	0x3e700000
 8005618:	41700000 	.word	0x41700000
 800561c:	3fe00000 	.word	0x3fe00000
 8005620:	08006170 	.word	0x08006170
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	b944      	cbnz	r4, 800563a <__kernel_rem_pio2+0x31a>
 8005628:	b11b      	cbz	r3, 8005632 <__kernel_rem_pio2+0x312>
 800562a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	2301      	movs	r3, #1
 8005632:	461c      	mov	r4, r3
 8005634:	3201      	adds	r2, #1
 8005636:	3704      	adds	r7, #4
 8005638:	e745      	b.n	80054c6 <__kernel_rem_pio2+0x1a6>
 800563a:	1acb      	subs	r3, r1, r3
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4623      	mov	r3, r4
 8005640:	e7f7      	b.n	8005632 <__kernel_rem_pio2+0x312>
 8005642:	1e72      	subs	r2, r6, #1
 8005644:	ab0c      	add	r3, sp, #48	; 0x30
 8005646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800564e:	a90c      	add	r1, sp, #48	; 0x30
 8005650:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005654:	e745      	b.n	80054e2 <__kernel_rem_pio2+0x1c2>
 8005656:	1e72      	subs	r2, r6, #1
 8005658:	ab0c      	add	r3, sp, #48	; 0x30
 800565a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005662:	e7f4      	b.n	800564e <__kernel_rem_pio2+0x32e>
 8005664:	a90c      	add	r1, sp, #48	; 0x30
 8005666:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800566a:	3b01      	subs	r3, #1
 800566c:	430a      	orrs	r2, r1
 800566e:	e796      	b.n	800559e <__kernel_rem_pio2+0x27e>
 8005670:	3401      	adds	r4, #1
 8005672:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005676:	2a00      	cmp	r2, #0
 8005678:	d0fa      	beq.n	8005670 <__kernel_rem_pio2+0x350>
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	f106 0801 	add.w	r8, r6, #1
 8005680:	18f5      	adds	r5, r6, r3
 8005682:	ab20      	add	r3, sp, #128	; 0x80
 8005684:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005688:	4434      	add	r4, r6
 800568a:	4544      	cmp	r4, r8
 800568c:	da04      	bge.n	8005698 <__kernel_rem_pio2+0x378>
 800568e:	4626      	mov	r6, r4
 8005690:	e6bf      	b.n	8005412 <__kernel_rem_pio2+0xf2>
 8005692:	2401      	movs	r4, #1
 8005694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005696:	e7ec      	b.n	8005672 <__kernel_rem_pio2+0x352>
 8005698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800569a:	f04f 0900 	mov.w	r9, #0
 800569e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80056a2:	f7fa ff5b 	bl	800055c <__aeabi_i2d>
 80056a6:	2600      	movs	r6, #0
 80056a8:	2700      	movs	r7, #0
 80056aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ac:	e9c5 0100 	strd	r0, r1, [r5]
 80056b0:	3b08      	subs	r3, #8
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	9504      	str	r5, [sp, #16]
 80056b6:	9b07      	ldr	r3, [sp, #28]
 80056b8:	4599      	cmp	r9, r3
 80056ba:	dd05      	ble.n	80056c8 <__kernel_rem_pio2+0x3a8>
 80056bc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80056c0:	f108 0801 	add.w	r8, r8, #1
 80056c4:	3508      	adds	r5, #8
 80056c6:	e7e0      	b.n	800568a <__kernel_rem_pio2+0x36a>
 80056c8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80056cc:	9900      	ldr	r1, [sp, #0]
 80056ce:	f109 0901 	add.w	r9, r9, #1
 80056d2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80056d6:	9100      	str	r1, [sp, #0]
 80056d8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80056dc:	f8cd c010 	str.w	ip, [sp, #16]
 80056e0:	f7fa ffa6 	bl	8000630 <__aeabi_dmul>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4630      	mov	r0, r6
 80056ea:	4639      	mov	r1, r7
 80056ec:	f7fa fdea 	bl	80002c4 <__adddf3>
 80056f0:	4606      	mov	r6, r0
 80056f2:	460f      	mov	r7, r1
 80056f4:	e7df      	b.n	80056b6 <__kernel_rem_pio2+0x396>
 80056f6:	3c01      	subs	r4, #1
 80056f8:	e756      	b.n	80055a8 <__kernel_rem_pio2+0x288>
 80056fa:	f1cb 0200 	rsb	r2, fp, #0
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	f000 fbd1 	bl	8005ea8 <scalbn>
 8005706:	2200      	movs	r2, #0
 8005708:	4ba4      	ldr	r3, [pc, #656]	; (800599c <__kernel_rem_pio2+0x67c>)
 800570a:	4604      	mov	r4, r0
 800570c:	460d      	mov	r5, r1
 800570e:	f7fb fa15 	bl	8000b3c <__aeabi_dcmpge>
 8005712:	b1f8      	cbz	r0, 8005754 <__kernel_rem_pio2+0x434>
 8005714:	2200      	movs	r2, #0
 8005716:	4ba2      	ldr	r3, [pc, #648]	; (80059a0 <__kernel_rem_pio2+0x680>)
 8005718:	4620      	mov	r0, r4
 800571a:	4629      	mov	r1, r5
 800571c:	f7fa ff88 	bl	8000630 <__aeabi_dmul>
 8005720:	f7fb fa20 	bl	8000b64 <__aeabi_d2iz>
 8005724:	4607      	mov	r7, r0
 8005726:	f7fa ff19 	bl	800055c <__aeabi_i2d>
 800572a:	2200      	movs	r2, #0
 800572c:	4b9b      	ldr	r3, [pc, #620]	; (800599c <__kernel_rem_pio2+0x67c>)
 800572e:	f7fa ff7f 	bl	8000630 <__aeabi_dmul>
 8005732:	460b      	mov	r3, r1
 8005734:	4602      	mov	r2, r0
 8005736:	4629      	mov	r1, r5
 8005738:	4620      	mov	r0, r4
 800573a:	f7fa fdc1 	bl	80002c0 <__aeabi_dsub>
 800573e:	f7fb fa11 	bl	8000b64 <__aeabi_d2iz>
 8005742:	1c74      	adds	r4, r6, #1
 8005744:	ab0c      	add	r3, sp, #48	; 0x30
 8005746:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800574a:	f10b 0b18 	add.w	fp, fp, #24
 800574e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8005752:	e731      	b.n	80055b8 <__kernel_rem_pio2+0x298>
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	f7fb fa04 	bl	8000b64 <__aeabi_d2iz>
 800575c:	ab0c      	add	r3, sp, #48	; 0x30
 800575e:	4634      	mov	r4, r6
 8005760:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005764:	e728      	b.n	80055b8 <__kernel_rem_pio2+0x298>
 8005766:	ab0c      	add	r3, sp, #48	; 0x30
 8005768:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800576c:	f7fa fef6 	bl	800055c <__aeabi_i2d>
 8005770:	4632      	mov	r2, r6
 8005772:	463b      	mov	r3, r7
 8005774:	f7fa ff5c 	bl	8000630 <__aeabi_dmul>
 8005778:	4642      	mov	r2, r8
 800577a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800577e:	464b      	mov	r3, r9
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fa ff54 	bl	8000630 <__aeabi_dmul>
 8005788:	f10a 3aff 	add.w	sl, sl, #4294967295
 800578c:	4606      	mov	r6, r0
 800578e:	460f      	mov	r7, r1
 8005790:	e722      	b.n	80055d8 <__kernel_rem_pio2+0x2b8>
 8005792:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005796:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800579a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800579e:	f8cd c01c 	str.w	ip, [sp, #28]
 80057a2:	f7fa ff45 	bl	8000630 <__aeabi_dmul>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4650      	mov	r0, sl
 80057ac:	4659      	mov	r1, fp
 80057ae:	f7fa fd89 	bl	80002c4 <__adddf3>
 80057b2:	4682      	mov	sl, r0
 80057b4:	468b      	mov	fp, r1
 80057b6:	f108 0801 	add.w	r8, r8, #1
 80057ba:	9b02      	ldr	r3, [sp, #8]
 80057bc:	4598      	cmp	r8, r3
 80057be:	dc01      	bgt.n	80057c4 <__kernel_rem_pio2+0x4a4>
 80057c0:	45b8      	cmp	r8, r7
 80057c2:	dde6      	ble.n	8005792 <__kernel_rem_pio2+0x472>
 80057c4:	ab48      	add	r3, sp, #288	; 0x120
 80057c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80057ca:	e9c7 ab00 	strd	sl, fp, [r7]
 80057ce:	3e01      	subs	r6, #1
 80057d0:	e707      	b.n	80055e2 <__kernel_rem_pio2+0x2c2>
 80057d2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	dc09      	bgt.n	80057ec <__kernel_rem_pio2+0x4cc>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dc32      	bgt.n	8005842 <__kernel_rem_pio2+0x522>
 80057dc:	d05a      	beq.n	8005894 <__kernel_rem_pio2+0x574>
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	f003 0007 	and.w	r0, r3, #7
 80057e4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80057e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d1f5      	bne.n	80057de <__kernel_rem_pio2+0x4be>
 80057f2:	ab48      	add	r3, sp, #288	; 0x120
 80057f4:	441d      	add	r5, r3
 80057f6:	46aa      	mov	sl, r5
 80057f8:	46a3      	mov	fp, r4
 80057fa:	f1bb 0f00 	cmp.w	fp, #0
 80057fe:	dc76      	bgt.n	80058ee <__kernel_rem_pio2+0x5ce>
 8005800:	46aa      	mov	sl, r5
 8005802:	46a3      	mov	fp, r4
 8005804:	f1bb 0f01 	cmp.w	fp, #1
 8005808:	f300 8090 	bgt.w	800592c <__kernel_rem_pio2+0x60c>
 800580c:	2700      	movs	r7, #0
 800580e:	463e      	mov	r6, r7
 8005810:	2c01      	cmp	r4, #1
 8005812:	f300 80aa 	bgt.w	800596a <__kernel_rem_pio2+0x64a>
 8005816:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800581a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f040 80ac 	bne.w	800597e <__kernel_rem_pio2+0x65e>
 8005826:	4603      	mov	r3, r0
 8005828:	462a      	mov	r2, r5
 800582a:	9806      	ldr	r0, [sp, #24]
 800582c:	e9c0 2300 	strd	r2, r3, [r0]
 8005830:	4622      	mov	r2, r4
 8005832:	460b      	mov	r3, r1
 8005834:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005838:	463a      	mov	r2, r7
 800583a:	4633      	mov	r3, r6
 800583c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005840:	e7cd      	b.n	80057de <__kernel_rem_pio2+0x4be>
 8005842:	2000      	movs	r0, #0
 8005844:	46a0      	mov	r8, r4
 8005846:	4601      	mov	r1, r0
 8005848:	ab48      	add	r3, sp, #288	; 0x120
 800584a:	441d      	add	r5, r3
 800584c:	f1b8 0f00 	cmp.w	r8, #0
 8005850:	da3a      	bge.n	80058c8 <__kernel_rem_pio2+0x5a8>
 8005852:	9b00      	ldr	r3, [sp, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d03e      	beq.n	80058d6 <__kernel_rem_pio2+0x5b6>
 8005858:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800585c:	4602      	mov	r2, r0
 800585e:	462b      	mov	r3, r5
 8005860:	9d06      	ldr	r5, [sp, #24]
 8005862:	2601      	movs	r6, #1
 8005864:	e9c5 2300 	strd	r2, r3, [r5]
 8005868:	460b      	mov	r3, r1
 800586a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800586e:	f7fa fd27 	bl	80002c0 <__aeabi_dsub>
 8005872:	4684      	mov	ip, r0
 8005874:	460f      	mov	r7, r1
 8005876:	ad48      	add	r5, sp, #288	; 0x120
 8005878:	42b4      	cmp	r4, r6
 800587a:	f105 0508 	add.w	r5, r5, #8
 800587e:	da2c      	bge.n	80058da <__kernel_rem_pio2+0x5ba>
 8005880:	9b00      	ldr	r3, [sp, #0]
 8005882:	b10b      	cbz	r3, 8005888 <__kernel_rem_pio2+0x568>
 8005884:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005888:	4662      	mov	r2, ip
 800588a:	463b      	mov	r3, r7
 800588c:	9906      	ldr	r1, [sp, #24]
 800588e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005892:	e7a4      	b.n	80057de <__kernel_rem_pio2+0x4be>
 8005894:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8005896:	ab48      	add	r3, sp, #288	; 0x120
 8005898:	4637      	mov	r7, r6
 800589a:	441d      	add	r5, r3
 800589c:	2c00      	cmp	r4, #0
 800589e:	da09      	bge.n	80058b4 <__kernel_rem_pio2+0x594>
 80058a0:	9b00      	ldr	r3, [sp, #0]
 80058a2:	b10b      	cbz	r3, 80058a8 <__kernel_rem_pio2+0x588>
 80058a4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80058a8:	4632      	mov	r2, r6
 80058aa:	463b      	mov	r3, r7
 80058ac:	9906      	ldr	r1, [sp, #24]
 80058ae:	e9c1 2300 	strd	r2, r3, [r1]
 80058b2:	e794      	b.n	80057de <__kernel_rem_pio2+0x4be>
 80058b4:	4630      	mov	r0, r6
 80058b6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fa fd02 	bl	80002c4 <__adddf3>
 80058c0:	3c01      	subs	r4, #1
 80058c2:	4606      	mov	r6, r0
 80058c4:	460f      	mov	r7, r1
 80058c6:	e7e9      	b.n	800589c <__kernel_rem_pio2+0x57c>
 80058c8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80058cc:	f7fa fcfa 	bl	80002c4 <__adddf3>
 80058d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80058d4:	e7ba      	b.n	800584c <__kernel_rem_pio2+0x52c>
 80058d6:	460d      	mov	r5, r1
 80058d8:	e7c0      	b.n	800585c <__kernel_rem_pio2+0x53c>
 80058da:	4660      	mov	r0, ip
 80058dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7fa fcef 	bl	80002c4 <__adddf3>
 80058e6:	3601      	adds	r6, #1
 80058e8:	4684      	mov	ip, r0
 80058ea:	460f      	mov	r7, r1
 80058ec:	e7c4      	b.n	8005878 <__kernel_rem_pio2+0x558>
 80058ee:	e9da 6700 	ldrd	r6, r7, [sl]
 80058f2:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80058f6:	4632      	mov	r2, r6
 80058f8:	463b      	mov	r3, r7
 80058fa:	4640      	mov	r0, r8
 80058fc:	4649      	mov	r1, r9
 80058fe:	f7fa fce1 	bl	80002c4 <__adddf3>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800590a:	4640      	mov	r0, r8
 800590c:	4649      	mov	r1, r9
 800590e:	f7fa fcd7 	bl	80002c0 <__aeabi_dsub>
 8005912:	4632      	mov	r2, r6
 8005914:	463b      	mov	r3, r7
 8005916:	f7fa fcd5 	bl	80002c4 <__adddf3>
 800591a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800591e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005922:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005926:	e9ca 2300 	strd	r2, r3, [sl]
 800592a:	e766      	b.n	80057fa <__kernel_rem_pio2+0x4da>
 800592c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005930:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	4630      	mov	r0, r6
 800593a:	4639      	mov	r1, r7
 800593c:	f7fa fcc2 	bl	80002c4 <__adddf3>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005948:	4630      	mov	r0, r6
 800594a:	4639      	mov	r1, r7
 800594c:	f7fa fcb8 	bl	80002c0 <__aeabi_dsub>
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	f7fa fcb6 	bl	80002c4 <__adddf3>
 8005958:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800595c:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005960:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005964:	e9ca 2300 	strd	r2, r3, [sl]
 8005968:	e74c      	b.n	8005804 <__kernel_rem_pio2+0x4e4>
 800596a:	4638      	mov	r0, r7
 800596c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005970:	4631      	mov	r1, r6
 8005972:	f7fa fca7 	bl	80002c4 <__adddf3>
 8005976:	3c01      	subs	r4, #1
 8005978:	4607      	mov	r7, r0
 800597a:	460e      	mov	r6, r1
 800597c:	e748      	b.n	8005810 <__kernel_rem_pio2+0x4f0>
 800597e:	9b06      	ldr	r3, [sp, #24]
 8005980:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005984:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005988:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800598c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005990:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005994:	601d      	str	r5, [r3, #0]
 8005996:	615e      	str	r6, [r3, #20]
 8005998:	e721      	b.n	80057de <__kernel_rem_pio2+0x4be>
 800599a:	bf00      	nop
 800599c:	41700000 	.word	0x41700000
 80059a0:	3e700000 	.word	0x3e700000
 80059a4:	00000000 	.word	0x00000000

080059a8 <__kernel_tan>:
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	b08b      	sub	sp, #44	; 0x2c
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	4bd9      	ldr	r3, [pc, #868]	; (8005d18 <__kernel_tan+0x370>)
 80059b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80059b6:	429e      	cmp	r6, r3
 80059b8:	4604      	mov	r4, r0
 80059ba:	460d      	mov	r5, r1
 80059bc:	4682      	mov	sl, r0
 80059be:	468b      	mov	fp, r1
 80059c0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80059c2:	9202      	str	r2, [sp, #8]
 80059c4:	9107      	str	r1, [sp, #28]
 80059c6:	dc58      	bgt.n	8005a7a <__kernel_tan+0xd2>
 80059c8:	f7fb f8cc 	bl	8000b64 <__aeabi_d2iz>
 80059cc:	4605      	mov	r5, r0
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d178      	bne.n	8005ac4 <__kernel_tan+0x11c>
 80059d2:	1c7b      	adds	r3, r7, #1
 80059d4:	4323      	orrs	r3, r4
 80059d6:	4333      	orrs	r3, r6
 80059d8:	d110      	bne.n	80059fc <__kernel_tan+0x54>
 80059da:	4620      	mov	r0, r4
 80059dc:	4659      	mov	r1, fp
 80059de:	f000 f9df 	bl	8005da0 <fabs>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	2000      	movs	r0, #0
 80059e8:	49cc      	ldr	r1, [pc, #816]	; (8005d1c <__kernel_tan+0x374>)
 80059ea:	f7fa ff4b 	bl	8000884 <__aeabi_ddiv>
 80059ee:	4682      	mov	sl, r0
 80059f0:	468b      	mov	fp, r1
 80059f2:	4650      	mov	r0, sl
 80059f4:	4659      	mov	r1, fp
 80059f6:	b00b      	add	sp, #44	; 0x2c
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fc:	2f01      	cmp	r7, #1
 80059fe:	d0f8      	beq.n	80059f2 <__kernel_tan+0x4a>
 8005a00:	4620      	mov	r0, r4
 8005a02:	4659      	mov	r1, fp
 8005a04:	9a02      	ldr	r2, [sp, #8]
 8005a06:	9b00      	ldr	r3, [sp, #0]
 8005a08:	f7fa fc5c 	bl	80002c4 <__adddf3>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	460f      	mov	r7, r1
 8005a12:	2000      	movs	r0, #0
 8005a14:	49c2      	ldr	r1, [pc, #776]	; (8005d20 <__kernel_tan+0x378>)
 8005a16:	f7fa ff35 	bl	8000884 <__aeabi_ddiv>
 8005a1a:	462e      	mov	r6, r5
 8005a1c:	4689      	mov	r9, r1
 8005a1e:	4652      	mov	r2, sl
 8005a20:	465b      	mov	r3, fp
 8005a22:	4680      	mov	r8, r0
 8005a24:	462c      	mov	r4, r5
 8005a26:	4630      	mov	r0, r6
 8005a28:	460d      	mov	r5, r1
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fa fc48 	bl	80002c0 <__aeabi_dsub>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	9802      	ldr	r0, [sp, #8]
 8005a36:	9900      	ldr	r1, [sp, #0]
 8005a38:	f7fa fc42 	bl	80002c0 <__aeabi_dsub>
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	464b      	mov	r3, r9
 8005a40:	f7fa fdf6 	bl	8000630 <__aeabi_dmul>
 8005a44:	4632      	mov	r2, r6
 8005a46:	4682      	mov	sl, r0
 8005a48:	468b      	mov	fp, r1
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	4639      	mov	r1, r7
 8005a50:	f7fa fdee 	bl	8000630 <__aeabi_dmul>
 8005a54:	2200      	movs	r2, #0
 8005a56:	4bb1      	ldr	r3, [pc, #708]	; (8005d1c <__kernel_tan+0x374>)
 8005a58:	f7fa fc34 	bl	80002c4 <__adddf3>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4650      	mov	r0, sl
 8005a62:	4659      	mov	r1, fp
 8005a64:	f7fa fc2e 	bl	80002c4 <__adddf3>
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	f7fa fde0 	bl	8000630 <__aeabi_dmul>
 8005a70:	4622      	mov	r2, r4
 8005a72:	462b      	mov	r3, r5
 8005a74:	f7fa fc26 	bl	80002c4 <__adddf3>
 8005a78:	e7b9      	b.n	80059ee <__kernel_tan+0x46>
 8005a7a:	4baa      	ldr	r3, [pc, #680]	; (8005d24 <__kernel_tan+0x37c>)
 8005a7c:	429e      	cmp	r6, r3
 8005a7e:	dd21      	ble.n	8005ac4 <__kernel_tan+0x11c>
 8005a80:	2900      	cmp	r1, #0
 8005a82:	da06      	bge.n	8005a92 <__kernel_tan+0xea>
 8005a84:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a88:	469b      	mov	fp, r3
 8005a8a:	9b00      	ldr	r3, [sp, #0]
 8005a8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4652      	mov	r2, sl
 8005a94:	a182      	add	r1, pc, #520	; (adr r1, 8005ca0 <__kernel_tan+0x2f8>)
 8005a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a9a:	465b      	mov	r3, fp
 8005a9c:	f7fa fc10 	bl	80002c0 <__aeabi_dsub>
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	a180      	add	r1, pc, #512	; (adr r1, 8005ca8 <__kernel_tan+0x300>)
 8005aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aaa:	9a02      	ldr	r2, [sp, #8]
 8005aac:	9b00      	ldr	r3, [sp, #0]
 8005aae:	f7fa fc07 	bl	80002c0 <__aeabi_dsub>
 8005ab2:	462b      	mov	r3, r5
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	f7fa fc05 	bl	80002c4 <__adddf3>
 8005aba:	2300      	movs	r3, #0
 8005abc:	4682      	mov	sl, r0
 8005abe:	468b      	mov	fp, r1
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	465b      	mov	r3, fp
 8005ac8:	4650      	mov	r0, sl
 8005aca:	4659      	mov	r1, fp
 8005acc:	f7fa fdb0 	bl	8000630 <__aeabi_dmul>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	4689      	mov	r9, r1
 8005ad8:	f7fa fdaa 	bl	8000630 <__aeabi_dmul>
 8005adc:	4642      	mov	r2, r8
 8005ade:	4604      	mov	r4, r0
 8005ae0:	460d      	mov	r5, r1
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	4650      	mov	r0, sl
 8005ae6:	4659      	mov	r1, fp
 8005ae8:	f7fa fda2 	bl	8000630 <__aeabi_dmul>
 8005aec:	a370      	add	r3, pc, #448	; (adr r3, 8005cb0 <__kernel_tan+0x308>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7fa fd99 	bl	8000630 <__aeabi_dmul>
 8005afe:	a36e      	add	r3, pc, #440	; (adr r3, 8005cb8 <__kernel_tan+0x310>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f7fa fbde 	bl	80002c4 <__adddf3>
 8005b08:	4622      	mov	r2, r4
 8005b0a:	462b      	mov	r3, r5
 8005b0c:	f7fa fd90 	bl	8000630 <__aeabi_dmul>
 8005b10:	a36b      	add	r3, pc, #428	; (adr r3, 8005cc0 <__kernel_tan+0x318>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f7fa fbd5 	bl	80002c4 <__adddf3>
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	f7fa fd87 	bl	8000630 <__aeabi_dmul>
 8005b22:	a369      	add	r3, pc, #420	; (adr r3, 8005cc8 <__kernel_tan+0x320>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fbcc 	bl	80002c4 <__adddf3>
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	462b      	mov	r3, r5
 8005b30:	f7fa fd7e 	bl	8000630 <__aeabi_dmul>
 8005b34:	a366      	add	r3, pc, #408	; (adr r3, 8005cd0 <__kernel_tan+0x328>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fbc3 	bl	80002c4 <__adddf3>
 8005b3e:	4622      	mov	r2, r4
 8005b40:	462b      	mov	r3, r5
 8005b42:	f7fa fd75 	bl	8000630 <__aeabi_dmul>
 8005b46:	a364      	add	r3, pc, #400	; (adr r3, 8005cd8 <__kernel_tan+0x330>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f7fa fbba 	bl	80002c4 <__adddf3>
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	f7fa fd6c 	bl	8000630 <__aeabi_dmul>
 8005b58:	a361      	add	r3, pc, #388	; (adr r3, 8005ce0 <__kernel_tan+0x338>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005b62:	4620      	mov	r0, r4
 8005b64:	4629      	mov	r1, r5
 8005b66:	f7fa fd63 	bl	8000630 <__aeabi_dmul>
 8005b6a:	a35f      	add	r3, pc, #380	; (adr r3, 8005ce8 <__kernel_tan+0x340>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa fba8 	bl	80002c4 <__adddf3>
 8005b74:	4622      	mov	r2, r4
 8005b76:	462b      	mov	r3, r5
 8005b78:	f7fa fd5a 	bl	8000630 <__aeabi_dmul>
 8005b7c:	a35c      	add	r3, pc, #368	; (adr r3, 8005cf0 <__kernel_tan+0x348>)
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	f7fa fb9f 	bl	80002c4 <__adddf3>
 8005b86:	4622      	mov	r2, r4
 8005b88:	462b      	mov	r3, r5
 8005b8a:	f7fa fd51 	bl	8000630 <__aeabi_dmul>
 8005b8e:	a35a      	add	r3, pc, #360	; (adr r3, 8005cf8 <__kernel_tan+0x350>)
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f7fa fb96 	bl	80002c4 <__adddf3>
 8005b98:	4622      	mov	r2, r4
 8005b9a:	462b      	mov	r3, r5
 8005b9c:	f7fa fd48 	bl	8000630 <__aeabi_dmul>
 8005ba0:	a357      	add	r3, pc, #348	; (adr r3, 8005d00 <__kernel_tan+0x358>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f7fa fb8d 	bl	80002c4 <__adddf3>
 8005baa:	4622      	mov	r2, r4
 8005bac:	462b      	mov	r3, r5
 8005bae:	f7fa fd3f 	bl	8000630 <__aeabi_dmul>
 8005bb2:	a355      	add	r3, pc, #340	; (adr r3, 8005d08 <__kernel_tan+0x360>)
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f7fa fb84 	bl	80002c4 <__adddf3>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005bc4:	f7fa fb7e 	bl	80002c4 <__adddf3>
 8005bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bcc:	f7fa fd30 	bl	8000630 <__aeabi_dmul>
 8005bd0:	9a02      	ldr	r2, [sp, #8]
 8005bd2:	9b00      	ldr	r3, [sp, #0]
 8005bd4:	f7fa fb76 	bl	80002c4 <__adddf3>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	f7fa fd28 	bl	8000630 <__aeabi_dmul>
 8005be0:	9a02      	ldr	r2, [sp, #8]
 8005be2:	9b00      	ldr	r3, [sp, #0]
 8005be4:	f7fa fb6e 	bl	80002c4 <__adddf3>
 8005be8:	a349      	add	r3, pc, #292	; (adr r3, 8005d10 <__kernel_tan+0x368>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	4604      	mov	r4, r0
 8005bf0:	460d      	mov	r5, r1
 8005bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bf6:	f7fa fd1b 	bl	8000630 <__aeabi_dmul>
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	f7fa fb61 	bl	80002c4 <__adddf3>
 8005c02:	460b      	mov	r3, r1
 8005c04:	e9cd 0100 	strd	r0, r1, [sp]
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4659      	mov	r1, fp
 8005c0c:	4650      	mov	r0, sl
 8005c0e:	f7fa fb59 	bl	80002c4 <__adddf3>
 8005c12:	4b44      	ldr	r3, [pc, #272]	; (8005d24 <__kernel_tan+0x37c>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	429e      	cmp	r6, r3
 8005c18:	460d      	mov	r5, r1
 8005c1a:	f340 8085 	ble.w	8005d28 <__kernel_tan+0x380>
 8005c1e:	4638      	mov	r0, r7
 8005c20:	f7fa fc9c 	bl	800055c <__aeabi_i2d>
 8005c24:	4622      	mov	r2, r4
 8005c26:	4680      	mov	r8, r0
 8005c28:	4689      	mov	r9, r1
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fcfe 	bl	8000630 <__aeabi_dmul>
 8005c34:	4642      	mov	r2, r8
 8005c36:	4606      	mov	r6, r0
 8005c38:	460f      	mov	r7, r1
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa fb40 	bl	80002c4 <__adddf3>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4630      	mov	r0, r6
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa fe1a 	bl	8000884 <__aeabi_ddiv>
 8005c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c54:	f7fa fb34 	bl	80002c0 <__aeabi_dsub>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	4659      	mov	r1, fp
 8005c60:	f7fa fb2e 	bl	80002c0 <__aeabi_dsub>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	f7fa fb2c 	bl	80002c4 <__adddf3>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4640      	mov	r0, r8
 8005c72:	4649      	mov	r1, r9
 8005c74:	f7fa fb24 	bl	80002c0 <__aeabi_dsub>
 8005c78:	9b07      	ldr	r3, [sp, #28]
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	179b      	asrs	r3, r3, #30
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	f1c3 0001 	rsb	r0, r3, #1
 8005c86:	460d      	mov	r5, r1
 8005c88:	f7fa fc68 	bl	800055c <__aeabi_i2d>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4620      	mov	r0, r4
 8005c92:	4629      	mov	r1, r5
 8005c94:	f7fa fccc 	bl	8000630 <__aeabi_dmul>
 8005c98:	e6a9      	b.n	80059ee <__kernel_tan+0x46>
 8005c9a:	bf00      	nop
 8005c9c:	f3af 8000 	nop.w
 8005ca0:	54442d18 	.word	0x54442d18
 8005ca4:	3fe921fb 	.word	0x3fe921fb
 8005ca8:	33145c07 	.word	0x33145c07
 8005cac:	3c81a626 	.word	0x3c81a626
 8005cb0:	74bf7ad4 	.word	0x74bf7ad4
 8005cb4:	3efb2a70 	.word	0x3efb2a70
 8005cb8:	32f0a7e9 	.word	0x32f0a7e9
 8005cbc:	3f12b80f 	.word	0x3f12b80f
 8005cc0:	1a8d1068 	.word	0x1a8d1068
 8005cc4:	3f3026f7 	.word	0x3f3026f7
 8005cc8:	fee08315 	.word	0xfee08315
 8005ccc:	3f57dbc8 	.word	0x3f57dbc8
 8005cd0:	e96e8493 	.word	0xe96e8493
 8005cd4:	3f8226e3 	.word	0x3f8226e3
 8005cd8:	1bb341fe 	.word	0x1bb341fe
 8005cdc:	3faba1ba 	.word	0x3faba1ba
 8005ce0:	db605373 	.word	0xdb605373
 8005ce4:	bef375cb 	.word	0xbef375cb
 8005ce8:	a03792a6 	.word	0xa03792a6
 8005cec:	3f147e88 	.word	0x3f147e88
 8005cf0:	f2f26501 	.word	0xf2f26501
 8005cf4:	3f4344d8 	.word	0x3f4344d8
 8005cf8:	c9560328 	.word	0xc9560328
 8005cfc:	3f6d6d22 	.word	0x3f6d6d22
 8005d00:	8406d637 	.word	0x8406d637
 8005d04:	3f9664f4 	.word	0x3f9664f4
 8005d08:	1110fe7a 	.word	0x1110fe7a
 8005d0c:	3fc11111 	.word	0x3fc11111
 8005d10:	55555563 	.word	0x55555563
 8005d14:	3fd55555 	.word	0x3fd55555
 8005d18:	3e2fffff 	.word	0x3e2fffff
 8005d1c:	3ff00000 	.word	0x3ff00000
 8005d20:	bff00000 	.word	0xbff00000
 8005d24:	3fe59427 	.word	0x3fe59427
 8005d28:	2f01      	cmp	r7, #1
 8005d2a:	d031      	beq.n	8005d90 <__kernel_tan+0x3e8>
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	2000      	movs	r0, #0
 8005d34:	4918      	ldr	r1, [pc, #96]	; (8005d98 <__kernel_tan+0x3f0>)
 8005d36:	f7fa fda5 	bl	8000884 <__aeabi_ddiv>
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d44:	4652      	mov	r2, sl
 8005d46:	465b      	mov	r3, fp
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fab8 	bl	80002c0 <__aeabi_dsub>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d58:	f7fa fab2 	bl	80002c0 <__aeabi_dsub>
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	462b      	mov	r3, r5
 8005d60:	f7fa fc66 	bl	8000630 <__aeabi_dmul>
 8005d64:	4632      	mov	r2, r6
 8005d66:	4682      	mov	sl, r0
 8005d68:	468b      	mov	fp, r1
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	4639      	mov	r1, r7
 8005d70:	f7fa fc5e 	bl	8000630 <__aeabi_dmul>
 8005d74:	2200      	movs	r2, #0
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <__kernel_tan+0x3f4>)
 8005d78:	f7fa faa4 	bl	80002c4 <__adddf3>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4650      	mov	r0, sl
 8005d82:	4659      	mov	r1, fp
 8005d84:	f7fa fa9e 	bl	80002c4 <__adddf3>
 8005d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d8c:	4634      	mov	r4, r6
 8005d8e:	e66d      	b.n	8005a6c <__kernel_tan+0xc4>
 8005d90:	4682      	mov	sl, r0
 8005d92:	468b      	mov	fp, r1
 8005d94:	e62d      	b.n	80059f2 <__kernel_tan+0x4a>
 8005d96:	bf00      	nop
 8005d98:	bff00000 	.word	0xbff00000
 8005d9c:	3ff00000 	.word	0x3ff00000

08005da0 <fabs>:
 8005da0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005da4:	4770      	bx	lr
	...

08005da8 <floor>:
 8005da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005db0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005db4:	2e13      	cmp	r6, #19
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4607      	mov	r7, r0
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	dc33      	bgt.n	8005e2a <floor+0x82>
 8005dc2:	2e00      	cmp	r6, #0
 8005dc4:	da14      	bge.n	8005df0 <floor+0x48>
 8005dc6:	a334      	add	r3, pc, #208	; (adr r3, 8005e98 <floor+0xf0>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fa7a 	bl	80002c4 <__adddf3>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f7fa febc 	bl	8000b50 <__aeabi_dcmpgt>
 8005dd8:	b138      	cbz	r0, 8005dea <floor+0x42>
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	da58      	bge.n	8005e90 <floor+0xe8>
 8005dde:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005de2:	431d      	orrs	r5, r3
 8005de4:	d001      	beq.n	8005dea <floor+0x42>
 8005de6:	2500      	movs	r5, #0
 8005de8:	4c2d      	ldr	r4, [pc, #180]	; (8005ea0 <floor+0xf8>)
 8005dea:	4623      	mov	r3, r4
 8005dec:	462f      	mov	r7, r5
 8005dee:	e025      	b.n	8005e3c <floor+0x94>
 8005df0:	4a2c      	ldr	r2, [pc, #176]	; (8005ea4 <floor+0xfc>)
 8005df2:	fa42 f806 	asr.w	r8, r2, r6
 8005df6:	ea01 0208 	and.w	r2, r1, r8
 8005dfa:	4302      	orrs	r2, r0
 8005dfc:	d01e      	beq.n	8005e3c <floor+0x94>
 8005dfe:	a326      	add	r3, pc, #152	; (adr r3, 8005e98 <floor+0xf0>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f7fa fa5e 	bl	80002c4 <__adddf3>
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f7fa fea0 	bl	8000b50 <__aeabi_dcmpgt>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d0ea      	beq.n	8005dea <floor+0x42>
 8005e14:	2c00      	cmp	r4, #0
 8005e16:	bfbe      	ittt	lt
 8005e18:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005e1c:	fa43 f606 	asrlt.w	r6, r3, r6
 8005e20:	19a4      	addlt	r4, r4, r6
 8005e22:	2500      	movs	r5, #0
 8005e24:	ea24 0408 	bic.w	r4, r4, r8
 8005e28:	e7df      	b.n	8005dea <floor+0x42>
 8005e2a:	2e33      	cmp	r6, #51	; 0x33
 8005e2c:	dd0a      	ble.n	8005e44 <floor+0x9c>
 8005e2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005e32:	d103      	bne.n	8005e3c <floor+0x94>
 8005e34:	f7fa fa46 	bl	80002c4 <__adddf3>
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	4619      	mov	r1, r3
 8005e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295
 8005e48:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005e4c:	fa22 f808 	lsr.w	r8, r2, r8
 8005e50:	ea18 0f00 	tst.w	r8, r0
 8005e54:	d0f2      	beq.n	8005e3c <floor+0x94>
 8005e56:	a310      	add	r3, pc, #64	; (adr r3, 8005e98 <floor+0xf0>)
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f7fa fa32 	bl	80002c4 <__adddf3>
 8005e60:	2200      	movs	r2, #0
 8005e62:	2300      	movs	r3, #0
 8005e64:	f7fa fe74 	bl	8000b50 <__aeabi_dcmpgt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d0be      	beq.n	8005dea <floor+0x42>
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	da02      	bge.n	8005e76 <floor+0xce>
 8005e70:	2e14      	cmp	r6, #20
 8005e72:	d103      	bne.n	8005e7c <floor+0xd4>
 8005e74:	3401      	adds	r4, #1
 8005e76:	ea25 0508 	bic.w	r5, r5, r8
 8005e7a:	e7b6      	b.n	8005dea <floor+0x42>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005e82:	fa03 f606 	lsl.w	r6, r3, r6
 8005e86:	4435      	add	r5, r6
 8005e88:	42bd      	cmp	r5, r7
 8005e8a:	bf38      	it	cc
 8005e8c:	18e4      	addcc	r4, r4, r3
 8005e8e:	e7f2      	b.n	8005e76 <floor+0xce>
 8005e90:	2500      	movs	r5, #0
 8005e92:	462c      	mov	r4, r5
 8005e94:	e7a9      	b.n	8005dea <floor+0x42>
 8005e96:	bf00      	nop
 8005e98:	8800759c 	.word	0x8800759c
 8005e9c:	7e37e43c 	.word	0x7e37e43c
 8005ea0:	bff00000 	.word	0xbff00000
 8005ea4:	000fffff 	.word	0x000fffff

08005ea8 <scalbn>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005eae:	4604      	mov	r4, r0
 8005eb0:	460d      	mov	r5, r1
 8005eb2:	4617      	mov	r7, r2
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	b996      	cbnz	r6, 8005ede <scalbn+0x36>
 8005eb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ebc:	4303      	orrs	r3, r0
 8005ebe:	d039      	beq.n	8005f34 <scalbn+0x8c>
 8005ec0:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <scalbn+0xe8>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f7fa fbb4 	bl	8000630 <__aeabi_dmul>
 8005ec8:	4b32      	ldr	r3, [pc, #200]	; (8005f94 <scalbn+0xec>)
 8005eca:	4604      	mov	r4, r0
 8005ecc:	429f      	cmp	r7, r3
 8005ece:	460d      	mov	r5, r1
 8005ed0:	da0f      	bge.n	8005ef2 <scalbn+0x4a>
 8005ed2:	a32b      	add	r3, pc, #172	; (adr r3, 8005f80 <scalbn+0xd8>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f7fa fbaa 	bl	8000630 <__aeabi_dmul>
 8005edc:	e006      	b.n	8005eec <scalbn+0x44>
 8005ede:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005ee2:	4296      	cmp	r6, r2
 8005ee4:	d10a      	bne.n	8005efc <scalbn+0x54>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	f7fa f9ec 	bl	80002c4 <__adddf3>
 8005eec:	4604      	mov	r4, r0
 8005eee:	460d      	mov	r5, r1
 8005ef0:	e020      	b.n	8005f34 <scalbn+0x8c>
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005ef8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005efc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005f00:	19b9      	adds	r1, r7, r6
 8005f02:	4291      	cmp	r1, r2
 8005f04:	dd0e      	ble.n	8005f24 <scalbn+0x7c>
 8005f06:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005f0a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005f0e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005f12:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005f16:	4820      	ldr	r0, [pc, #128]	; (8005f98 <scalbn+0xf0>)
 8005f18:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005f1c:	a31a      	add	r3, pc, #104	; (adr r3, 8005f88 <scalbn+0xe0>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	e7d9      	b.n	8005ed8 <scalbn+0x30>
 8005f24:	2900      	cmp	r1, #0
 8005f26:	dd08      	ble.n	8005f3a <scalbn+0x92>
 8005f28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f30:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005f3e:	da12      	bge.n	8005f66 <scalbn+0xbe>
 8005f40:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005f44:	429f      	cmp	r7, r3
 8005f46:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005f4a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8005f4e:	dcdc      	bgt.n	8005f0a <scalbn+0x62>
 8005f50:	a30b      	add	r3, pc, #44	; (adr r3, 8005f80 <scalbn+0xd8>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005f5a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005f5e:	480f      	ldr	r0, [pc, #60]	; (8005f9c <scalbn+0xf4>)
 8005f60:	f041 011f 	orr.w	r1, r1, #31
 8005f64:	e7b8      	b.n	8005ed8 <scalbn+0x30>
 8005f66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f6a:	3136      	adds	r1, #54	; 0x36
 8005f6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f70:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005f74:	4620      	mov	r0, r4
 8005f76:	4629      	mov	r1, r5
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <scalbn+0xf8>)
 8005f7c:	e7ac      	b.n	8005ed8 <scalbn+0x30>
 8005f7e:	bf00      	nop
 8005f80:	c2f8f359 	.word	0xc2f8f359
 8005f84:	01a56e1f 	.word	0x01a56e1f
 8005f88:	8800759c 	.word	0x8800759c
 8005f8c:	7e37e43c 	.word	0x7e37e43c
 8005f90:	43500000 	.word	0x43500000
 8005f94:	ffff3cb0 	.word	0xffff3cb0
 8005f98:	8800759c 	.word	0x8800759c
 8005f9c:	c2f8f359 	.word	0xc2f8f359
 8005fa0:	3c900000 	.word	0x3c900000

08005fa4 <_init>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr

08005fb0 <_fini>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr
